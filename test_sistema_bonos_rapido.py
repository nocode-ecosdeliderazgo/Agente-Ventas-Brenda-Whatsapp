#!/usr/bin/env python3
"""
Script de prueba r√°pida para verificar el sistema de bonos inteligente.
Prueba la activaci√≥n de bonos sin necesidad de WhatsApp.
"""
import asyncio
import sys
import os
from datetime import datetime

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.application.usecases.bonus_activation_use_case import BonusActivationUseCase
from app.application.usecases.analyze_message_intent import AnalyzeMessageIntentUseCase
from app.application.usecases.generate_intelligent_response import GenerateIntelligentResponseUseCase
from app.infrastructure.openai.client import OpenAIClient
from app.infrastructure.twilio.client import TwilioWhatsAppClient
from app.domain.entities.message import IncomingMessage
from memory.lead_memory import LeadMemory

def print_test_header():
    """Imprime header del test"""
    print("üß™ PRUEBA R√ÅPIDA - SISTEMA DE BONOS INTELIGENTE")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üéØ Objetivo: Verificar activaci√≥n contextual de bonos")
    print("=" * 60)

async def test_bonus_activation():
    """Prueba la activaci√≥n de bonos contextuales"""
    print("\nüéÅ PRUEBA 1: Activaci√≥n de Bonos Contextuales")
    print("-" * 50)
    
    try:
        # Inicializar caso de uso de bonos
        bonus_use_case = BonusActivationUseCase()
        
        # Simular diferentes contextos
        test_cases = [
            {
                "name": "Luc√≠a CopyPro (Marketing)",
                "role": "Marketing Digital",
                "context": "price_objection",
                "message": "Es muy caro el curso"
            },
            {
                "name": "Marcos Multitask (Operaciones)",
                "role": "Director de Operaciones",
                "context": "buying_signals",
                "message": "Quiero inscribirme"
            },
            {
                "name": "Sof√≠a Visionaria (CEO)",
                "role": "CEO",
                "context": "career_growth",
                "message": "Busco crecer profesionalmente"
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìã Test Case {i}: {test_case['name']}")
            print(f"   Rol: {test_case['role']}")
            print(f"   Contexto: {test_case['context']}")
            print(f"   Mensaje: '{test_case['message']}'")
            
            # Simular memoria del usuario
            user_memory = LeadMemory(
                user_id="test_user",
                name=test_case['name'].split()[0],
                role=test_case['role'],
                interests=["automatizaci√≥n", "productividad"],
                pain_points=["tiempo", "eficiencia"]
            )
            
            # Activar bonos contextuales
            bonus_result = await bonus_use_case.activate_contextual_bonuses(
                user_role=test_case['role'],
                conversation_context=test_case['context'],
                urgency_level='high',
                user_interests=user_memory.interests,
                pain_points=user_memory.pain_points
            )
            
            print(f"   ‚úÖ Bonos activados: {len(bonus_result.get('contextual_bonuses', []))}")
            
            if bonus_result.get('contextual_bonuses'):
                print("   üéÅ Bonos priorizados:")
                for j, bonus in enumerate(bonus_result['contextual_bonuses'][:3], 1):
                    content = bonus.get('content', 'Bono disponible')
                    priority = bonus.get('priority_reason', 'Prioridad alta')
                    print(f"      {j}. {content[:50]}...")
                    print(f"         Raz√≥n: {priority}")
            
            print()
        
        print("‚úÖ PRUEBA 1 COMPLETADA: Activaci√≥n de bonos funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de bonos: {e}")
        return False

async def test_intent_analysis():
    """Prueba el an√°lisis de intenci√≥n con bonos"""
    print("\nüß† PRUEBA 2: An√°lisis de Intenci√≥n con Bonos")
    print("-" * 50)
    
    try:
        # Inicializar componentes
        openai_client = OpenAIClient()
        intent_analyzer = AnalyzeMessageIntentUseCase(openai_client)
        
        # Mensajes de prueba
        test_messages = [
            "Cu√©ntame sobre el curso",
            "Es muy caro",
            "Quiero inscribirme",
            "No s√© si podr√© aprender"
        ]
        
        for i, message in enumerate(test_messages, 1):
            print(f"\nüìù Test Message {i}: '{message}'")
            
            # Crear mensaje simulado
            incoming_message = IncomingMessage(
                from_number="+1234567890",
                body=message,
                message_type="text"
            )
            
            # Analizar intenci√≥n
            analysis_result = await intent_analyzer.execute(
                user_id="test_user",
                incoming_message=incoming_message,
                context_info=""
            )
            
            if analysis_result['success']:
                category = analysis_result.get('intent_analysis', {}).get('category', 'N/A')
                print(f"   ‚úÖ Intenci√≥n detectada: {category}")
                
                # Simular activaci√≥n de bonos
                if category in ['EXPLORATION', 'BUYING_SIGNALS', 'OBJECTION_PRICE', 'TECHNICAL_FEAR']:
                    print(f"   üéÅ Bonos se activar√≠an para: {category}")
                else:
                    print(f"   ‚ÑπÔ∏è Categor√≠a no requiere bonos: {category}")
            else:
                print(f"   ‚ùå Error en an√°lisis: {analysis_result.get('error')}")
            
            print()
        
        print("‚úÖ PRUEBA 2 COMPLETADA: An√°lisis de intenci√≥n funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de an√°lisis: {e}")
        return False

async def test_response_generation():
    """Prueba la generaci√≥n de respuestas con bonos"""
    print("\nüí¨ PRUEBA 3: Generaci√≥n de Respuestas con Bonos")
    print("-" * 50)
    
    try:
        # Inicializar componentes
        openai_client = OpenAIClient()
        twilio_client = TwilioWhatsAppClient()
        
        # Crear caso de uso de respuesta
        response_use_case = GenerateIntelligentResponseUseCase(
            intent_analyzer=None,  # No necesario para esta prueba
            twilio_client=twilio_client,
            openai_client=openai_client
        )
        
        # Simular diferentes categor√≠as
        test_categories = [
            "EXPLORATION",
            "BUYING_SIGNALS", 
            "OBJECTION_PRICE",
            "TECHNICAL_FEAR"
        ]
        
        for category in test_categories:
            print(f"\nüéØ Probando categor√≠a: {category}")
            
            # Simular resultado de an√°lisis
            analysis_result = {
                'success': True,
                'intent_analysis': {'category': category},
                'user_memory': LeadMemory(
                    user_id="test_user",
                    name="Juan",
                    role="Marketing Digital",
                    interests=["automatizaci√≥n"],
                    pain_points=["tiempo"]
                )
            }
            
            # Simular mensaje
            incoming_message = IncomingMessage(
                from_number="+1234567890",
                body="Mensaje de prueba",
                message_type="text"
            )
            
            # Generar respuesta contextual
            response = await response_use_case._generate_contextual_response(
                analysis_result=analysis_result,
                incoming_message=incoming_message,
                user_id="test_user"
            )
            
            print(f"   ‚úÖ Respuesta generada: {len(response)} caracteres")
            print(f"   üìÑ Preview: {response[:100]}...")
            
            # Verificar si incluye informaci√≥n de bonos
            if "üéÅ" in response or "BONOS" in response.upper():
                print("   üéÅ ‚úÖ Respuesta incluye informaci√≥n de bonos")
            else:
                print("   ‚ÑπÔ∏è Respuesta sin bonos (puede ser normal)")
            
            print()
        
        print("‚úÖ PRUEBA 3 COMPLETADA: Generaci√≥n de respuestas funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de respuestas: {e}")
        return False

async def main():
    """Funci√≥n principal de pruebas"""
    print_test_header()
    
    # Ejecutar pruebas
    tests = [
        ("Activaci√≥n de Bonos", test_bonus_activation),
        ("An√°lisis de Intenci√≥n", test_intent_analysis),
        ("Generaci√≥n de Respuestas", test_response_generation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen de resultados
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON! El sistema est√° funcionando correctamente.")
        print("üöÄ Puedes proceder con las pruebas de WhatsApp.")
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores antes de continuar.")
    
    print("\nüìã Pr√≥ximos pasos:")
    print("1. Ejecutar: python run_webhook_server_debug.py")
    print("2. Configurar ngrok: ngrok http 8000")
    print("3. Configurar webhook en Twilio Console")
    print("4. Probar con mensajes reales de WhatsApp")

if __name__ == "__main__":
    asyncio.run(main()) 