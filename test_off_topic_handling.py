#!/usr/bin/env python3
"""
Test del sistema de manejo de mensajes fuera de contexto y ofensivos.
"""

import asyncio
import os
import sys

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from prompts.agent_prompts import WhatsAppBusinessTemplates


def print_test_header(test_name: str):
    """Imprime header del test."""
    print(f"\n{'='*70}")
    print(f"üß™ TEST: {test_name}")
    print(f"{'='*70}")


def print_response_sample(response: str, title: str):
    """Imprime muestra de respuesta."""
    print(f"\nüìù {title}:")
    print(f"   {response[:150]}{'...' if len(response) > 150 else ''}")


async def test_casual_off_topic_redirect():
    """Test de redirecci√≥n casual con humor."""
    print_test_header("REDIRECCI√ìN CASUAL CON HUMOR")
    
    # Test mensajes casuales
    casual_messages = [
        "¬øC√≥mo est√° el clima hoy?",
        "¬øQu√© opinas del f√∫tbol?",
        "¬øTe gusta la m√∫sica?",
        "¬øSabes cocinar?",
        "¬øQu√© hora es?"
    ]
    
    print("üîÑ Probando diferentes mensajes casuales...")
    
    for i, message in enumerate(casual_messages):
        response = WhatsAppBusinessTemplates.off_topic_casual_redirect("Carlos", message.split()[0])
        print(f"\n   {i+1}. Mensaje: '{message}'")
        print_response_sample(response, "Respuesta con humor")
        
        # Verificar elementos clave
        has_humor = any(emoji in response for emoji in ["üòÖ", "ü§î", "üòä", "üéØ"])
        has_redirect = "IA" in response and "empresa" in response
        has_course_offer = "curso" in response
        
        if has_humor and has_redirect and has_course_offer:
            print("      ‚úÖ Contiene humor, redirecci√≥n y oferta de curso")
        else:
            print(f"      ‚ùå Falta elementos: Humor({has_humor}), Redirect({has_redirect}), Curso({has_course_offer})")


async def test_repeated_off_topic_predefined():
    """Test de mensaje predeterminado para intentos repetidos."""
    print_test_header("MENSAJE PREDETERMINADO - INTENTOS REPETIDOS")
    
    response = WhatsAppBusinessTemplates.off_topic_repeated_predefined("Mar√≠a")
    
    print_response_sample(response, "Mensaje predeterminado completo")
    
    # Verificar elementos clave
    elements_check = {
        "Menciona funci√≥n principal": "funci√≥n principal" in response,
        "Mensaje claro sobre especialidad": "√°rea de especialidad" in response,
        "Ofrece alternativas de curso": "Te interesa conocer" in response,
        "Lista beneficios espec√≠ficos": "Automatizar procesos" in response,
        "Pregunta de acci√≥n": "¬øPor cu√°l empezamos?" in response,
        "Tono profesional": "encantada" in response
    }
    
    print(f"\nüìä VERIFICACI√ìN DE ELEMENTOS:")
    for element, present in elements_check.items():
        status = "‚úÖ" if present else "‚ùå"
        print(f"   {status} {element}")
    
    all_present = all(elements_check.values())
    if all_present:
        print(f"\nüéâ MENSAJE PREDETERMINADO COMPLETO Y EFECTIVO")
    else:
        print(f"\n‚ö†Ô∏è  FALTAN ELEMENTOS EN MENSAJE PREDETERMINADO")


async def test_offensive_message_firm_response():
    """Test de respuesta firme para mensajes ofensivos."""
    print_test_header("RESPUESTA FIRME - MENSAJES OFENSIVOS")
    
    response = WhatsAppBusinessTemplates.offensive_message_firm_response("Roberto")
    
    print_response_sample(response, "Respuesta firme completa")
    
    # Verificar elementos clave
    firmness_check = {
        "Se√±ala comportamiento inapropiado": "no es adecuado" in response,
        "Mantiene profesionalismo": "profesional" in response,
        "Establece l√≠mites claros": "respeto mutuo" in response,
        "Reitera funci√≥n espec√≠fica": "√∫nicamente proveer informaci√≥n" in response,
        "Ofrece continuar profesionalmente": "continuar con informaci√≥n" in response,
        "No es grosero": not any(word in response.lower() for word in ["idiota", "est√∫pido", "tonto"])
    }
    
    print(f"\nüìä VERIFICACI√ìN DE FIRMEZA APROPIADA:")
    for element, present in firmness_check.items():
        status = "‚úÖ" if present else "‚ùå"
        print(f"   {status} {element}")
    
    all_appropriate = all(firmness_check.values())
    if all_appropriate:
        print(f"\nüéâ RESPUESTA FIRME PERO PROFESIONAL")
    else:
        print(f"\n‚ö†Ô∏è  REVISAR EQUILIBRIO FIRMEZA/PROFESIONALISMO")


async def test_humor_variations():
    """Test de variaciones de humor en respuestas casuales."""
    print_test_header("VARIACIONES DE HUMOR")
    
    print("üé≠ Probando diferentes respuestas de humor...")
    
    # Generar varias respuestas para ver variaciones
    responses = []
    for i in range(5):
        response = WhatsAppBusinessTemplates.off_topic_casual_redirect("Ana", "clima")
        responses.append(response)
    
    # Verificar que hay variaciones
    unique_responses = len(set(responses))
    
    print(f"\nüìä Generadas {len(responses)} respuestas, {unique_responses} √∫nicas")
    
    if unique_responses > 1:
        print("‚úÖ Sistema genera respuestas variadas (evita repetici√≥n)")
        for i, response in enumerate(set(responses), 1):
            humor_line = response.split('\n')[0]  # Primera l√≠nea con humor
            print(f"   {i}. {humor_line}")
    else:
        print("‚ùå Sistema genera siempre la misma respuesta")
    
    # Verificar elementos de humor espec√≠ficos
    humor_elements = ["üòÖ", "ü§î", "üòä", "üéØ", "Google", "cerebro", "especialidad"]
    
    print(f"\nüéØ ELEMENTOS DE HUMOR DETECTADOS:")
    for element in humor_elements:
        found_in = sum(1 for response in responses if element in response)
        if found_in > 0:
            print(f"   ‚úÖ '{element}' usado en {found_in}/{len(responses)} respuestas")


async def test_integration_scenarios():
    """Test de escenarios de integraci√≥n completos."""
    print_test_header("ESCENARIOS DE INTEGRACI√ìN")
    
    scenarios = [
        {
            "name": "Usuario Nuevo - Primera pregunta casual",
            "user": "",
            "expected_response": "humor",
            "description": "Debe redirigir con humor sin conocer el nombre"
        },
        {
            "name": "Usuario Conocido - Segunda pregunta off-topic", 
            "user": "Pedro",
            "expected_response": "predefined",
            "description": "Debe usar mensaje predeterminado m√°s firme"
        },
        {
            "name": "Comportamiento ofensivo",
            "user": "Luis",
            "expected_response": "firm",
            "description": "Debe responder firmemente pero sin agresividad"
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìã ESCENARIO: {scenario['name']}")
        print(f"   {scenario['description']}")
        
        if scenario['expected_response'] == 'humor':
            response = WhatsAppBusinessTemplates.off_topic_casual_redirect(scenario['user'])
        elif scenario['expected_response'] == 'predefined':
            response = WhatsAppBusinessTemplates.off_topic_repeated_predefined(scenario['user'])
        else:
            response = WhatsAppBusinessTemplates.offensive_message_firm_response(scenario['user'])
        
        print_response_sample(response, f"Respuesta para {scenario['name']}")
        
        # Verificar personalizaci√≥n por nombre
        if scenario['user']:
            has_name = scenario['user'] in response
            print(f"   {'‚úÖ' if has_name else '‚ùå'} Personalizado con nombre del usuario")


async def main():
    """Funci√≥n principal."""
    print("üöÄ INICIANDO TESTS DE MANEJO DE MENSAJES FUERA DE CONTEXTO")
    print("=" * 70)
    
    # Test 1: Redirecci√≥n casual con humor
    await test_casual_off_topic_redirect()
    
    # Test 2: Mensaje predeterminado para intentos repetidos
    await test_repeated_off_topic_predefined()
    
    # Test 3: Respuesta firme para mensajes ofensivos
    await test_offensive_message_firm_response()
    
    # Test 4: Variaciones de humor
    await test_humor_variations()
    
    # Test 5: Escenarios de integraci√≥n
    await test_integration_scenarios()
    
    # Resumen final
    print(f"\n{'='*70}")
    print("üéâ EVALUACI√ìN DEL SISTEMA DE MANEJO OFF-TOPIC")
    print(f"{'='*70}")
    
    print(f"\n‚úÖ FUNCIONALIDADES IMPLEMENTADAS:")
    print("‚Ä¢ Detecci√≥n de 5 categor√≠as off-topic (CASUAL, PERSONAL, UNRELATED, REPEATED, OFFENSIVE)")
    print("‚Ä¢ Redirecci√≥n con humor/sarcasmo ligero para primeros intentos")
    print("‚Ä¢ Respuestas variadas para evitar repetici√≥n")
    print("‚Ä¢ Mensaje predeterminado claro para intentos reiterados")
    print("‚Ä¢ Respuesta firme pero profesional para comportamiento ofensivo")
    print("‚Ä¢ Personalizaci√≥n con nombre del usuario cuando disponible")
    
    print(f"\nüéØ CARACTER√çSTICAS DEL SISTEMA:")
    print("‚Ä¢ Mantiene tono profesional en todas las respuestas")
    print("‚Ä¢ Siempre redirige hacia informaci√≥n de cursos")
    print("‚Ä¢ Escalaci√≥n gradual: humor ‚Üí predeterminado ‚Üí firme")
    print("‚Ä¢ Tracking de intentos off-topic en memoria del usuario")
    print("‚Ä¢ Impacto en lead_score seg√∫n severidad del comportamiento")
    
    print(f"\nüîÑ FLUJO DE MANEJO:")
    print("1. **Primer intento off-topic**: Humor/sarcasmo + redirecci√≥n amable")
    print("2. **Segundo+ intento**: Mensaje predeterminado claro sobre funci√≥n")
    print("3. **Comportamiento ofensivo**: Respuesta firme + l√≠mites profesionales")
    print("4. **Tracking en memoria**: Contador de intentos + impacto en lead_score")
    
    print(f"\nüö® PR√ìXIMOS PASOS PARA PRUEBAS REALES:")
    print("‚Ä¢ Probar detecci√≥n de categor√≠as en an√°lisis de intenci√≥n")
    print("‚Ä¢ Verificar que memoria de usuario se actualiza correctamente")
    print("‚Ä¢ Confirmar que lead_score se ajusta seg√∫n comportamiento")
    print("‚Ä¢ Validar escalaci√≥n gradual en conversaciones m√∫ltiples")
    
    print(f"\n‚úÖ SISTEMA DE MANEJO OFF-TOPIC LISTO PARA IMPLEMENTACI√ìN")


if __name__ == "__main__":
    asyncio.run(main())