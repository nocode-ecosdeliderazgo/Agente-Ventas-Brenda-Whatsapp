"""
Integraci√≥n entre Dynamic Course Info Provider y templates de respuesta.
Elimina dependencias de informaci√≥n hardcodeada en templates.
"""
import logging
from typing import Dict, Any, Optional, Union
from memory.lead_memory import LeadMemory
from app.application.usecases.dynamic_course_info_provider import DynamicCourseInfoProvider

logger = logging.getLogger(__name__)


class DynamicTemplateIntegration:
    """
    Integra informaci√≥n din√°mica de cursos con templates de respuesta.
    Reemplaza valores hardcodeados con datos reales de BD.
    """
    
    def __init__(self, dynamic_course_provider: DynamicCourseInfoProvider):
        self.course_provider = dynamic_course_provider
    
    async def get_dynamic_price_objection_response(
        self, 
        role: str = "", 
        sector: str = "", 
        user_memory: Optional[LeadMemory] = None
    ) -> Dict[str, Any]:
        """
        Genera respuesta a objeciones de precio con informaci√≥n din√°mica de BD.
        
        Args:
            role: Rol del usuario
            sector: Sector empresarial
            user_memory: Memoria del usuario
            
        Returns:
            Dict con respuesta personalizada y datos del curso
        """
        try:
            # Obtener informaci√≥n din√°mica del curso
            course_data = await self.course_provider.get_primary_course_info()
            
            # Datos reales del curso
            course_price = course_data['price']
            price_formatted = course_data['price_formatted']
            course_name = course_data['name']
            
            # ROI din√°mico basado en precio real
            roi_examples = self._generate_dynamic_roi_examples(course_price, role)
            
            # Construir respuesta
            response_text = self._build_price_objection_text(
                price_formatted, roi_examples, course_name, role, sector
            )
            
            return {
                'response_text': response_text,
                'course_data': course_data,
                'roi_examples': roi_examples,
                'has_real_data': course_price > 0
            }
            
        except Exception as e:
            logger.error(f"Error generando respuesta din√°mica de precio: {e}")
            return self._get_fallback_price_response(role, sector)
    
    def _generate_dynamic_roi_examples(self, course_price: int, role: str) -> str:
        """
        Genera ejemplos de ROI basados en el precio real del curso.
        
        Args:
            course_price: Precio real del curso desde BD
            role: Rol del usuario
            
        Returns:
            String con ejemplo de ROI espec√≠fico
        """
        if course_price <= 0:
            return "ROI personalizado seg√∫n tu empresa y necesidades espec√≠ficas"
        
        # Calcular ROI din√°mico basado en rol
        if "marketing" in role.lower() or "content" in role.lower():
            monthly_savings = 1200  # 4 campa√±as * $300 ahorro
            months_to_break_even = max(1, round(course_price / monthly_savings, 1))
            return f"""
**üí° ROI para Marketing (basado en casos reales):**
‚Ä¢ Antes: 8 horas/campa√±a √ó $50/hora = $400 por campa√±a
‚Ä¢ Despu√©s: 2 horas con IA √ó $50/hora = $100 por campa√±a
‚Ä¢ **Ahorro: $300 por campa√±a**
‚Ä¢ **Break-even: {months_to_break_even} {'mes' if months_to_break_even == 1 else 'meses'}** (4 campa√±as/mes)"""
        
        elif "operaciones" in role.lower() or "manufactura" in role.lower():
            monthly_savings = 2000  # Ahorro en procesos
            months_to_break_even = max(1, round(course_price / monthly_savings, 1))
            return f"""
**üí° ROI para Operaciones (casos documentados):**
‚Ä¢ Antes: 12 horas/semana reportes √ó $50/hora = $2,400/mes
‚Ä¢ Despu√©s: 2 horas automatizadas √ó $50/hora = $400/mes  
‚Ä¢ **Ahorro mensual: $2,000**
‚Ä¢ **Break-even: {months_to_break_even} {'mes' if months_to_break_even == 1 else 'meses'}**"""
        
        elif "ceo" in role.lower() or "fundador" in role.lower():
            monthly_savings = 2300  # Costo analista vs curso
            months_to_break_even = max(1, round(course_price / monthly_savings, 1))
            yearly_savings = monthly_savings * 12
            return f"""
**üí° ROI Ejecutivo (an√°lisis de costos):**
‚Ä¢ Costo analista junior: $2,500/mes = $30,000/a√±o
‚Ä¢ Costo curso + tiempo propio: ${round(course_price/12):,}/mes = ${course_price:,}/a√±o
‚Ä¢ **Ahorro anual: ${yearly_savings:,}**
‚Ä¢ **Break-even: {months_to_break_even} {'mes' if months_to_break_even == 1 else 'meses'}**"""
        
        else:
            # ROI gen√©rico para otros roles
            estimated_monthly_savings = max(1000, course_price // 4)  # Estimaci√≥n conservadora
            months_to_break_even = max(1, round(course_price / estimated_monthly_savings, 1))
            return f"""
**üí° ROI Personalizado:**
‚Ä¢ Ahorro estimado: ${estimated_monthly_savings:,}/mes en procesos optimizados
‚Ä¢ **Break-even: {months_to_break_even} {'mes' if months_to_break_even == 1 else 'meses'}**
‚Ä¢ ROI anual proyectado: {round((estimated_monthly_savings * 12 / course_price) * 100)}%"""
    
    def _build_price_objection_text(
        self, 
        price_formatted: str, 
        roi_examples: str, 
        course_name: str,
        role: str, 
        sector: str
    ) -> str:
        """Construye el texto completo de respuesta a objeciones de precio."""
        
        return f"""Entiendo la preocupaci√≥n por el presupuesto - es t√≠pico de l√≠deres PyME responsables. üí∞

**üè¢ PERSPECTIVA EMPRESARIAL:**
‚Ä¢ {course_name}: {price_formatted} (inversi√≥n √∫nica, resultados permanentes)
‚Ä¢ Contratar especialista IA: $3,000-5,000/mes (+ prestaciones)
‚Ä¢ Consultor√≠a externa: $200/hora √ó 40 horas = $8,000 USD
‚Ä¢ Seguir perdiendo eficiencia: **Costo de oportunidad ilimitado**

**üìä VALOR ESPEC√çFICO PARA PYMES:**
‚Ä¢ Framework IMPULSO: aplicable a cualquier proceso desde d√≠a 1
‚Ä¢ Sin dependencia t√©cnica: tu equipo actual puede implementarlo
‚Ä¢ Actualizaciones incluidas: siempre al d√≠a con nueva tecnolog√≠a
‚Ä¢ Casos reales PyME: ejemplos de tu mismo tama√±o de empresa{roi_examples}

**üéØ LA PREGUNTA ESTRAT√âGICA:**
¬øPuedes permitirte que tu competencia implemente IA antes que t√∫?

¬øTe gustar√≠a que revisemos un plan de implementaci√≥n por fases para optimizar tu inversi√≥n?"""
    
    def _get_fallback_price_response(self, role: str, sector: str) -> Dict[str, Any]:
        """Respuesta de fallback cuando no hay datos de BD."""
        return {
            'response_text': f"""Entiendo tu preocupaci√≥n por el presupuesto. üí∞

**üè¢ PERSPECTIVA EMPRESARIAL:**
‚Ä¢ Curso profesional de IA: Inversi√≥n √∫nica, resultados permanentes
‚Ä¢ Contratar especialista: $3,000-5,000/mes + prestaciones
‚Ä¢ Consultor√≠a externa: $200/hora √ó 40 horas = $8,000 USD

**üìä VALOR PARA PYMES:**
‚Ä¢ Sin dependencia t√©cnica: tu equipo actual puede implementarlo
‚Ä¢ Actualizaciones incluidas: siempre al d√≠a con tecnolog√≠a
‚Ä¢ ROI personalizado seg√∫n tu empresa espec√≠fica

¬øTe gustar√≠a que revisemos un plan de implementaci√≥n personalizado?""",
            'course_data': {},
            'roi_examples': "ROI por confirmar seg√∫n tu empresa",
            'has_real_data': False
        }
    
    async def get_dynamic_course_summary(
        self, 
        user_memory: Optional[LeadMemory] = None,
        course_code: str = ""
    ) -> Dict[str, Any]:
        """
        Genera resumen de curso con informaci√≥n din√°mica de BD.
        
        Args:
            user_memory: Memoria del usuario
            course_code: C√≥digo del curso solicitado
            
        Returns:
            Dict con resumen personalizado y datos del curso
        """
        try:
            course_data = await self.course_provider.get_course_for_templates()
            
            # Personalizaci√≥n por usuario
            user_name = user_memory.name if user_memory and user_memory.name != "Usuario" else ""
            name_greeting = f"{user_name}, " if user_name else ""
            
            # Informaci√≥n del curso con datos reales
            summary_text = f"""üéØ ¬°Perfecto {name_greeting}aqu√≠ tienes toda la informaci√≥n!

üìö **{course_data['name']}**

üî• **INFORMACI√ìN CLAVE:**
üí∞ Inversi√≥n: {course_data['price_text']}
üìä Nivel: {course_data['level']}
üóìÔ∏è Duraci√≥n: {course_data['session_count']} sesiones ({course_data['duration_hours']} horas)
üåê Modalidad: {course_data['modality']}

**üéÅ BONOS INCLUIDOS:**"""
            
            # Agregar bonos reales de BD
            for i, bond in enumerate(course_data['bonds'], 1):
                summary_text += f"\n{i}. {bond['content']}"
            
            if not course_data['bonds']:
                summary_text += "\n‚Ä¢ Recursos complementarios incluidos"
            
            summary_text += f"""

**üí° ROI PARA TU PERFIL:**
{course_data.get('roi_' + user_memory.role.lower().replace(' ', '_'), 'ROI personalizado seg√∫n tu empresa') if user_memory and user_memory.role else 'ROI adaptado a tu negocio'}

¬øTe gustar√≠a conocer m√°s detalles de alg√∫n m√≥dulo espec√≠fico?"""
            
            return {
                'summary_text': summary_text,
                'course_data': course_data,
                'has_real_data': course_data['price'] > 0
            }
            
        except Exception as e:
            logger.error(f"Error generando resumen din√°mico de curso: {e}")
            return {
                'summary_text': "üìö Informaci√≥n del curso disponible. Te contactaremos con los detalles espec√≠ficos.",
                'course_data': {},
                'has_real_data': False
            }