#!/usr/bin/env python3
"""
Proveedor de conocimiento FAQ para respuestas inteligentes.
Compatible con el sistema de base de datos y el agente inteligente.
"""

import asyncio
from typing import Dict, Any, List, Optional
from app.infrastructure.faq.faq_processor import FAQProcessor


class FAQKnowledgeProvider:
    """
    Proveedor de conocimiento FAQ que proporciona informaci√≥n contextual
    al agente inteligente para generar respuestas naturales e inteligentes.
    """
    
    def __init__(self):
        """Inicializa el proveedor de conocimiento FAQ."""
        self.faq_processor = FAQProcessor()
    
    async def get_faq_context_for_intelligence(self, message: str, user_context: Dict[str, Any] = {}) -> Dict[str, Any]:
        """
        Obtiene contexto FAQ para que el agente inteligente pueda responder naturalmente.
        
        Args:
            message: Mensaje del usuario
            user_context: Contexto del usuario (rol, empresa, etc.)
            
        Returns:
            Dict con contexto FAQ para el agente inteligente
        """
        # Detectar si es una FAQ
        faq_match = await self.faq_processor.detect_faq(message)
        
        if not faq_match:
            return {
                'is_faq': False,
                'context': ''
            }
        
        # Construir contexto completo para el agente inteligente
        faq_context = {
            'is_faq': True,
            'category': faq_match['category'],
            'question': faq_match['question'],
            'base_answer': faq_match['answer'],
            'escalation_needed': faq_match.get('escalation_needed', False),
            'priority': faq_match.get('priority', 'medium'),
            'keywords': faq_match.get('keywords', []),
            'context_for_ai': self._build_ai_context(faq_match, user_context)
        }
        
        return faq_context
    
    def _build_ai_context(self, faq_match: Dict[str, Any], user_context: Dict[str, Any]) -> str:
        """
        Construye contexto espec√≠fico para que el AI genere respuestas naturales.
        
        Args:
            faq_match: FAQ encontrada
            user_context: Contexto del usuario
            
        Returns:
            String con contexto para el AI
        """
        category = faq_match['category']
        base_answer = faq_match['answer']
        escalation_needed = faq_match.get('escalation_needed', False)
        
        # Informaci√≥n adicional por categor√≠a para personalizaci√≥n inteligente
        additional_context = self._get_additional_context_by_category(category, user_context)
        
        context = f"""
INFORMACI√ìN FAQ DETECTADA:
- Categor√≠a: {category}
- Pregunta tipo: {faq_match['question']}
- Respuesta base: {base_answer}
- Requiere escalaci√≥n: {'S√≠' if escalation_needed else 'No'}

CONTEXTO ADICIONAL:
{additional_context}

INSTRUCCIONES PARA RESPUESTA:
- Usa la informaci√≥n base pero hazla natural y conversacional
- Personaliza seg√∫n el contexto del usuario
- Si requiere escalaci√≥n, menciona que se conectar√° con un especialista
- Mant√©n el tono profesional pero amigable
- No inventes informaci√≥n que no est√© en el contexto
"""
        
        return context.strip()
    
    def _get_additional_context_by_category(self, category: str, user_context: Dict[str, Any]) -> str:
        """
        Obtiene contexto adicional espec√≠fico por categor√≠a de FAQ.
        
        Args:
            category: Categor√≠a de la FAQ
            user_context: Contexto del usuario
            
        Returns:
            Contexto adicional espec√≠fico
        """
        user_role = user_context.get('user_role', '')
        company_size = user_context.get('company_size', '')
        industry = user_context.get('industry', '')
        
        additional_contexts = {
            'precio': f"""
INFORMACI√ìN ADICIONAL DE PRECIOS:
- Precio principal: $2,990 MXN
- Modalidades de pago: Pago completo o 2 exhibiciones sin inter√©s
- Descuento grupal: 10% por inscripci√≥n grupal (m√°s de 3 personas)
- ROI t√≠pico: 300-500% en 6 meses
- Incluye: Acceso completo, soporte, certificado, comunidad privada
- Para {user_role}: Enf√≥cate en ROI y beneficios empresariales
- Empresa {company_size}: Adaptable a tu presupuesto
""",
            
            'duraci√≥n': f"""
üìÖ **DURACI√ìN DEL CURSO:**
‚Ä¢ 4 sesiones en vivo + pr√°ctica guiada
‚Ä¢ 12 horas contenido + 8 horas ejercicios
‚Ä¢ 8 semanas (2-3 horas/semana)
‚Ä¢ Grabaciones + acceso por 12 meses
‚Ä¢ Para {user_role}: Aplicaci√≥n inmediata
""",
            
            'implementaci√≥n': f"""
üöÄ **IMPLEMENTACI√ìN:**
‚Ä¢ 5 fases: Evaluaci√≥n ‚Üí Configuraci√≥n ‚Üí Entrenamiento ‚Üí Piloto ‚Üí Despliegue
‚Ä¢ Tiempo total: 6 semanas
‚Ä¢ Para {industry}: Casos espec√≠ficos disponibles
‚Ä¢ Empresa {company_size}: Proceso adaptado
‚Ä¢ üìû Consultor√≠a especializada requerida
""",
            
            'requisitos': f"""
‚úÖ **REQUISITOS:**
‚Ä¢ Computadora + Internet
‚Ä¢ Conocimientos b√°sicos de computaci√≥n
‚Ä¢ NO necesitas programaci√≥n ni experiencia en IA
‚Ä¢ Dirigido a: Ejecutivos, managers, emprendedores, PyMEs
‚Ä¢ Para {user_role}: Perfil ideal para transformaci√≥n digital
""",
            
            'casos_√©xito': f"""
üèÜ **CASOS DE √âXITO:**
‚Ä¢ Tecnol√≥gica: 50% ‚Üì tiempo desarrollo, $150K ahorro
‚Ä¢ Hospital: 30% ‚Üë atenci√≥n paciente, 45% ‚Üì errores  
‚Ä¢ Manufactura: 60% ‚Üë eficiencia, 25% ‚Üì costos
‚Ä¢ Para {industry}: Casos espec√≠ficos disponibles
""",
            
            'roi': f"""
üí∞ **ROI ESPERADO:**
‚Ä¢ 300-500% en primeros 6 meses
‚Ä¢ Ahorros: Tiempo, productividad, costos
‚Ä¢ Para {user_role}: Impacto directo en resultados
‚Ä¢ Empresa {company_size}: ROI escalable
‚Ä¢ üìä C√°lculo personalizado disponible
""",
            
            'certificado': f"""
üéì **CERTIFICADO:**
‚Ä¢ "Experto en IA para Profesionales" con c√≥digo √∫nico
‚Ä¢ Examen pr√°ctico: proyecto + casos (90 min)
‚Ä¢ Requisitos: 75% asistencia + 70% calificaci√≥n
‚Ä¢ Reconocido por empresas, v√°lido CV/LinkedIn
‚Ä¢ Para {user_role}: Credencial liderazgo digital
""",
            
            'soporte': f"""
ü§ù **SOPORTE:**
‚Ä¢ 2 sesiones Q&A en vivo
‚Ä¢ Foro privado + networking
‚Ä¢ "AplicaAI Helper" 24/7
‚Ä¢ Comunidad exclusiva post-curso
‚Ä¢ Para {user_role}: Soporte especializado
""",
            
            'acceso': f"""
üîì **ACCESO:**
‚Ä¢ 12 meses acceso total
‚Ä¢ Grabaciones inmediatas (4 sesiones)
‚Ä¢ Materiales: PDF, plantillas, docs
‚Ä¢ Foro privado + comunidad
‚Ä¢ Actualizaciones incluidas
‚Ä¢ 24/7 desde cualquier dispositivo
""",
            
            'garant√≠a': f"""
üõ°Ô∏è **GARANT√çA:**
‚Ä¢ 30 d√≠as satisfacci√≥n garantizada
‚Ä¢ Devoluci√≥n completa sin preguntas
‚Ä¢ Para {user_role}: Inversi√≥n sin riesgo
""",
            
            'incluye': f"""
üì¶ **INCLUYE:**
‚Ä¢ Manual PDF completo
‚Ä¢ Plantillas prompting + GPTs personalizados
‚Ä¢ Grabaciones 4 sesiones
‚Ä¢ 2 sesiones Q&A en vivo
‚Ä¢ Foro privado + networking
‚Ä¢ Para {user_role}: Recursos espec√≠ficos
‚Ä¢ Empresa {company_size}: Plantillas adaptadas
""",
            
            'ventajas': f"""
‚≠ê **VENTAJAS √öNICAS:**
‚Ä¢ Pr√°ctica guiada en vivo
‚Ä¢ Recursos premium para productividad
‚Ä¢ Soporte post-curso 24/7 + foro exclusivo
‚Ä¢ Proyecto real para tu organizaci√≥n
‚Ä¢ Para {user_role}: Aplicaci√≥n directa
‚Ä¢ Industria {industry}: Casos espec√≠ficos
""",
            
            'examen': f"""
üìã **EXAMEN:**
‚Ä¢ 100% pr√°ctico (proyecto + casos, 90 min)
‚Ä¢ Escenarios reales + dise√±o de prompts
‚Ä¢ Preparaci√≥n: Plantillas IMPULSO + Custom GPTs
‚Ä¢ Para {user_role}: Evaluaci√≥n aplicaci√≥n profesional
‚Ä¢ Objetivo: Demostrar capacidad real IA
"""
        }
        
        return additional_contexts.get(category, f"Informaci√≥n espec√≠fica para {category} adaptada a tu perfil {user_role}.")
    
    async def should_use_intelligent_faq(self, message: str) -> bool:
        """
        Determina si el mensaje debe ser manejado por el agente inteligente con contexto FAQ.
        
        Args:
            message: Mensaje del usuario
            
        Returns:
            True si debe usar el agente inteligente para FAQ
        """
        # Siempre usar agente inteligente para FAQs para respuestas m√°s naturales
        faq_match = await self.faq_processor.detect_faq(message)
        return faq_match is not None
    
    async def get_all_faq_categories(self) -> List[str]:
        """
        Obtiene todas las categor√≠as de FAQ disponibles.
        
        Returns:
            Lista de categor√≠as FAQ
        """
        return [faq['category'] for faq in self.faq_processor.faq_database]
    
    async def get_faq_by_category(self, category: str) -> Optional[Dict[str, Any]]:
        """
        Obtiene una FAQ espec√≠fica por categor√≠a.
        
        Args:
            category: Categor√≠a de la FAQ
            
        Returns:
            FAQ encontrada o None
        """
        for faq in self.faq_processor.faq_database:
            if faq['category'] == category:
                return faq
        return None
    
    async def get_related_faqs(self, category: str) -> List[Dict[str, Any]]:
        """
        Obtiene FAQs relacionadas a una categor√≠a.
        
        Args:
            category: Categor√≠a principal
            
        Returns:
            Lista de FAQs relacionadas
        """
        # Mapeo de categor√≠as relacionadas
        related_categories = {
            'precio': ['roi', 'garant√≠a', 'incluye'],
            'roi': ['precio', 'casos_√©xito', 'ventajas'],
            'implementaci√≥n': ['duraci√≥n', 'requisitos', 'soporte'],
            'duraci√≥n': ['implementaci√≥n', 'acceso', 'incluye'],
            'requisitos': ['implementaci√≥n', 'soporte', 'ventajas'],
            'casos_√©xito': ['roi', 'implementaci√≥n', 'ventajas'],
            'certificado': ['acceso', 'garant√≠a', 'examen'],
            'soporte': ['implementaci√≥n', 'acceso', 'incluye'],
            'acceso': ['duraci√≥n', 'soporte', 'incluye'],
            'garant√≠a': ['precio', 'certificado'],
            'incluye': ['precio', 'acceso', 'ventajas'],
            'ventajas': ['roi', 'casos_√©xito', 'incluye'],
            'examen': ['certificado', 'requisitos']
        }
        
        related_cats = related_categories.get(category, [])
        related_faqs = []
        
        for cat in related_cats:
            faq = await self.get_faq_by_category(cat)
            if faq:
                related_faqs.append(faq)
        
        return related_faqs