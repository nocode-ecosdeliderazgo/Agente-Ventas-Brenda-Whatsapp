[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "brenda-whatsapp-bot"
version = "2.3.0"
description = "WhatsApp Sales Bot for AI Courses - Clean Architecture Implementation"
authors = [
    {name = "Aprende y Aplica AI Team"}
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "twilio>=8.10.0",
    "openai>=1.3.0",
    "asyncpg>=0.29.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "asynctest>=0.13.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "coverage[toml]>=7.0.0",
    "pre-commit>=3.0.0"
]

[tool.ruff]
# Same as Black's default line length
line-length = 88
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "SIM108", # Use ternary operator (sometimes less readable)
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Exclude common directories
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "legacy/",
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and fixtures
"tests/*" = ["PLR2004", "S101", "ARG", "FBT"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Use spaces instead of tabs for indentation
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Automatically detect line endings
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | legacy
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for third-party libraries without stubs
[[tool.mypy.overrides]]
module = [
    "twilio.*",
    "openai.*",
    "asyncpg.*",
    "uvicorn.*"
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "legacy/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"