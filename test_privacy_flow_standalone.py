"""
Test independiente para el flujo de privacidad sin dependencias externas.
Solo prueba los templates y la l√≥gica de extracci√≥n de datos.
"""
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.templates.privacy_flow_templates import PrivacyFlowTemplates

def print_separator(title: str):
    """Imprime un separador visual para organizar los tests."""
    print(f"\n{'='*60}")
    print(f"üîê {title}")
    print('='*60)

def test_whatsapp_name_extraction():
    """Test de extracci√≥n de nombre desde metadatos de WhatsApp."""
    print_separator("TEST: EXTRACCI√ìN DE NOMBRE DE WHATSAPP")
    
    templates = PrivacyFlowTemplates()
    
    # Test casos positivos
    test_cases = [
        # Caso con ProfileName
        {
            "raw_data": {"ProfileName": "Juan Garc√≠a", "From": "whatsapp:+5213334567890"},
            "expected": "Juan Garc√≠a",
            "description": "ProfileName disponible"
        },
        # Caso con ContactName
        {
            "raw_data": {"ContactName": "Mar√≠a L√≥pez", "From": "whatsapp:+5213334567891"},
            "expected": "Mar√≠a L√≥pez", 
            "description": "ContactName disponible"
        },
        # Caso sin nombre
        {
            "raw_data": {"From": "whatsapp:+5213334567892"},
            "expected": None,
            "description": "Sin informaci√≥n de nombre"
        },
        # Caso con WaId diferente
        {
            "raw_data": {"WaId": "Dr.Martinez", "From": "whatsapp:+5213334567893"},
            "expected": "Dr.Martinez",
            "description": "WaId como nombre"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        result = templates.get_whatsapp_display_name(case["raw_data"])
        success = result == case["expected"]
        
        print(f"   {i}. {case['description']}: {'‚úÖ' if success else '‚ùå'}")
        if success:
            print(f"      Nombre extra√≠do: {result or 'No disponible'}")
        else:
            print(f"      Esperado: {case['expected']}, Obtenido: {result}")
        
        assert success, f"Error en caso {i}: {case['description']}"
    
    print("\nüéâ EXTRACCI√ìN DE NOMBRES: TODOS LOS CASOS EXITOSOS")

def test_consent_response_detection():
    """Test de detecci√≥n de respuestas de consentimiento."""
    print_separator("TEST: DETECCI√ìN DE RESPUESTAS DE CONSENTIMIENTO")
    
    templates = PrivacyFlowTemplates()
    
    # Test casos de respuestas
    test_cases = [
        # Respuestas afirmativas
        ("ACEPTO", True, "Aceptaci√≥n expl√≠cita may√∫scula"),
        ("acepto", True, "Aceptaci√≥n expl√≠cita min√∫scula"),
        ("S√≠", True, "S√≠ con acento"),
        ("si", True, "Si sin acento"),
        ("OK", True, "OK may√∫scula"),
        ("ok", True, "ok min√∫scula"),
        ("de acuerdo", True, "De acuerdo"),
        ("est√° bien", True, "Est√° bien"),
        ("perfecto", True, "Perfecto"),
        ("adelante", True, "Adelante"),
        
        # Respuestas negativas
        ("NO ACEPTO", False, "Rechazo expl√≠cito may√∫scula"),
        ("no acepto", False, "Rechazo expl√≠cito min√∫scula"),
        ("NO", False, "No may√∫scula"),
        ("no", False, "No min√∫scula"),
        ("nop", False, "Nop"),
        ("rechazo", False, "Rechazo"),
        ("no quiero", False, "No quiero"),
        ("no deseo", False, "No deseo"),
        
        # Respuestas poco claras
        ("tal vez", None, "Tal vez"),
        ("no s√©", None, "No s√©"),
        ("mmm", None, "Mmm"),
        ("depende", None, "Depende"),
        ("qu√© es eso", None, "Pregunta"),
        ("hola", None, "Saludo irrelevante")
    ]
    
    for message, expected, description in test_cases:
        result = templates.extract_consent_response(message)
        success = result == expected
        
        status = "‚úÖ" if success else "‚ùå"
        result_text = "ACEPTA" if result is True else "RECHAZA" if result is False else "NO CLARO"
        
        print(f"   {status} '{message}' ‚Üí {result_text} ({description})")
        
        if not success:
            expected_text = "ACEPTA" if expected is True else "RECHAZA" if expected is False else "NO CLARO"
            print(f"       ‚ùå Esperado: {expected_text}, Obtenido: {result_text}")
        
        assert success, f"Error detectando '{message}': esperado {expected}, obtenido {result}"
    
    print("\nüéâ DETECCI√ìN DE CONSENTIMIENTO: TODOS LOS CASOS EXITOSOS")

def test_name_extraction_and_validation():
    """Test de extracci√≥n y validaci√≥n de nombres."""
    print_separator("TEST: EXTRACCI√ìN Y VALIDACI√ìN DE NOMBRES")
    
    templates = PrivacyFlowTemplates()
    
    # Test casos de nombres
    test_cases = [
        # Nombres v√°lidos
        ("Juan", "Juan", "Nombre simple"),
        ("mar√≠a", "Mar√≠a", "Nombre con min√∫scula inicial"),
        ("CARLOS", "Carlos", "Nombre en may√∫sculas"),
        ("juan carlos", "Juan Carlos", "Nombre compuesto"),
        ("mar√≠a jos√©", "Mar√≠a Jos√©", "Nombre compuesto femenino"),
        ("Dr. Garc√≠a", "Dr. Garc√≠a", "Nombre con t√≠tulo"),
        ("Ana-Sof√≠a", "Ana-Sof√≠a", "Nombre con gui√≥n"),
        ("Jos√© Mar√≠a", "Jos√© Mar√≠a", "Nombre masculino compuesto"),
        
        # Nombres inv√°lidos
        ("no s√©", None, "Respuesta evasiva"),
        ("no tengo", None, "No tengo"),
        ("da igual", None, "Da igual"),
        ("cualquiera", None, "Cualquiera"),
        ("", None, "Cadena vac√≠a"),
        ("a", None, "Muy corto"),
        ("123", None, "Solo n√∫meros"),
        ("@#$%", None, "Solo s√≠mbolos"),
        ("x" * 60, None, "Muy largo"),
        ("nada", None, "Nada")
    ]
    
    for input_name, expected, description in test_cases:
        result = templates.extract_user_name(input_name)
        success = result == expected
        
        status = "‚úÖ" if success else "‚ùå"
        result_display = result or "INV√ÅLIDO"
        
        print(f"   {status} '{input_name}' ‚Üí '{result_display}' ({description})")
        
        if not success:
            expected_display = expected or "INV√ÅLIDO"
            print(f"       ‚ùå Esperado: '{expected_display}', Obtenido: '{result_display}'")
        
        assert success, f"Error validando '{input_name}': esperado {expected}, obtenido {result}"
    
    print("\nüéâ VALIDACI√ìN DE NOMBRES: TODOS LOS CASOS EXITOSOS")

def test_message_templates():
    """Test de generaci√≥n de templates de mensajes."""
    print_separator("TEST: GENERACI√ìN DE TEMPLATES DE MENSAJES")
    
    templates = PrivacyFlowTemplates()
    
    # Test mensaje de consentimiento sin nombre
    consent_message = templates.privacy_consent_request()
    
    required_elements = [
        ("¬°Hola!", "Saludo gen√©rico"),
        ("Soy **Brenda**", "Presentaci√≥n"),
        ("consentimiento", "Solicitud consentimiento"),
        ("ACEPTO", "Opci√≥n aceptar"),
        ("NO ACEPTO", "Opci√≥n rechazar"),
        ("privacidad", "Menci√≥n privacidad")
    ]
    
    print("   üìù Mensaje de consentimiento (sin nombre):")
    for element, description in required_elements:
        present = element in consent_message
        status = "‚úÖ" if present else "‚ùå"
        print(f"      {status} {description}: '{element}'")
        assert present, f"Elemento faltante: {element}"
    
    # Test mensaje de consentimiento con nombre
    consent_with_name = templates.privacy_consent_request("Mar√≠a Garc√≠a")
    
    name_checks = [
        ("¬°Hola Mar√≠a Garc√≠a!", "Saludo personalizado"),
        ("Soy **Brenda**", "Presentaci√≥n mantenida")
    ]
    
    print("\n   üìù Mensaje de consentimiento (con nombre):")
    for element, description in name_checks:
        present = element in consent_with_name
        status = "‚úÖ" if present else "‚ùå"
        print(f"      {status} {description}: '{element}'")
        assert present, f"Elemento faltante con nombre: {element}"
    
    # Test otros templates
    other_templates = [
        (templates.privacy_accepted_name_request(), "Solicitud de nombre", "¬øC√≥mo te gustar√≠a que te llamemos?"),
        (templates.privacy_rejected(), "Rechazo profesional", "Entiendo perfectamente"),
        (templates.name_confirmed("Carlos"), "Confirmaci√≥n nombre", "Carlos"),
        (templates.invalid_privacy_response(), "Respuesta inv√°lida", "respuesta clara"),
        (templates.name_request_reminder(), "Recordatorio nombre", "nombre preferido")
    ]
    
    print("\n   üìù Otros templates:")
    for template, description, key_element in other_templates:
        present = key_element in template
        status = "‚úÖ" if present else "‚ùå"
        print(f"      {status} {description}: contiene '{key_element}'")
        assert present, f"Template {description} no contiene {key_element}"
    
    print("\nüéâ GENERACI√ìN DE TEMPLATES: TODOS LOS CASOS EXITOSOS")

def test_privacy_flow_detection():
    """Test de detecci√≥n de mensajes del flujo de privacidad."""
    print_separator("TEST: DETECCI√ìN DE MENSAJES DE FLUJO")
    
    templates = PrivacyFlowTemplates()
    
    # Test casos de mensajes relacionados con privacidad
    test_cases = [
        ("ACEPTO", True, "Aceptaci√≥n expl√≠cita"),
        ("no acepto", True, "Rechazo expl√≠cito"),
        ("privacidad", True, "Menci√≥n privacidad"),
        ("consentimiento", True, "Menci√≥n consentimiento"),  
        ("t√©rminos", True, "Menci√≥n t√©rminos"),
        ("datos", True, "Menci√≥n datos"),
        ("hola", False, "Saludo simple"),
        ("¬øqu√© cursos tienen?", False, "Pregunta sobre cursos"),
        ("gracias", False, "Agradecimiento"),
        ("informaci√≥n", False, "Solicitud informaci√≥n")
    ]
    
    for message, expected, description in test_cases:
        result = templates.is_privacy_flow_message(message)
        success = result == expected
        
        status = "‚úÖ" if success else "‚ùå"
        result_text = "S√ç" if result else "NO"
        
        print(f"   {status} '{message}' ‚Üí {result_text} ({description})")
        
        assert success, f"Error detectando '{message}': esperado {expected}, obtenido {result}"
    
    print("\nüéâ DETECCI√ìN DE MENSAJES: TODOS LOS CASOS EXITOSOS")

def display_sample_messages():
    """Muestra ejemplos de mensajes generados."""
    print_separator("EJEMPLOS DE MENSAJES GENERADOS")
    
    templates = PrivacyFlowTemplates()
    
    print("üì± MENSAJE DE CONSENTIMIENTO (con nombre extra√≠do):")
    print("-" * 50)
    consent_msg = templates.privacy_consent_request("Juan Garc√≠a")
    print(consent_msg)
    
    print("\nüì± SOLICITUD DE NOMBRE:")
    print("-" * 50)
    name_request = templates.privacy_accepted_name_request()
    print(name_request)
    
    print("\nüì± CONFIRMACI√ìN FINAL:")
    print("-" * 50)
    confirmation = templates.name_confirmed("Juan Carlos")
    print(confirmation)
    
    print("\nüìä ESTAD√çSTICAS DE MENSAJES:")
    print(f"   üìè Consentimiento: {len(consent_msg)} caracteres")
    print(f"   üìè Solicitud nombre: {len(name_request)} caracteres")
    print(f"   üìè Confirmaci√≥n: {len(confirmation)} caracteres")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTS INDEPENDIENTES DEL FLUJO DE PRIVACIDAD")
    
    try:
        # Ejecutar todos los tests
        test_whatsapp_name_extraction()
        test_consent_response_detection()
        test_name_extraction_and_validation()
        test_message_templates()
        test_privacy_flow_detection()
        
        # Mostrar ejemplos
        display_sample_messages()
        
        print_separator("RESUMEN FINAL")
        print("üéâ TODOS LOS TESTS COMPLETADOS EXITOSAMENTE")
        print("\n‚úÖ FUNCIONALIDADES VALIDADAS:")
        print("   üë§ Extracci√≥n de nombres desde metadatos de WhatsApp")
        print("   üîç Detecci√≥n precisa de respuestas de consentimiento")
        print("   üìù Validaci√≥n robusta de nombres de usuario")
        print("   üí¨ Generaci√≥n correcta de todos los templates")
        print("   üéØ Detecci√≥n de mensajes del flujo de privacidad")
        print("   üì± Mensajes profesionales y bien estructurados")
        
        print("\nüöÄ EL FLUJO DE PRIVACIDAD EST√Å LISTO PARA INTEGRACI√ìN")
        
    except AssertionError as e:
        print(f"\n‚ùå ERROR EN TEST: {e}")
        exit(1)
    except Exception as e:
        print(f"\nüí• ERROR INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        exit(1)