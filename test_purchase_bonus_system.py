#!/usr/bin/env python3
"""
Test del sistema de bonos por intenci√≥n de compra.
Prueba la detecci√≥n de intenci√≥n de compra y activaci√≥n autom√°tica de bonos workbook.
"""
import asyncio
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

from app.application.usecases.purchase_bonus_use_case import PurchaseBonusUseCase
from memory.lead_memory import LeadMemory, MemoryManager
from app.application.usecases.manage_user_memory import ManageUserMemoryUseCase


async def test_purchase_intent_detection():
    """Test detecci√≥n de intenci√≥n de compra."""
    print("üß™ TESTING: Purchase Intent Detection")
    print("=" * 50)
    
    purchase_bonus_use_case = PurchaseBonusUseCase()
    
    # Test cases para intenci√≥n de compra
    test_cases = [
        {
            'name': 'Intenci√≥n directa de compra',
            'intent_analysis': {
                'category': 'PURCHASE_INTENT_DIRECT',
                'confidence': 0.9,
                'buying_signals_detected': ['quiero comprarlo', 'c√≥mo pago']
            },
            'should_activate': True
        },
        {
            'name': 'Pregunta de precio',
            'intent_analysis': {
                'category': 'PURCHASE_INTENT_PRICING',
                'confidence': 0.8,
                'buying_signals_detected': ['cu√°nto cuesta', 'precio']
            },
            'should_activate': True
        },
        {
            'name': 'Se√±ales de estar listo',
            'intent_analysis': {
                'category': 'PURCHASE_READY_SIGNALS',
                'confidence': 0.85,
                'buying_signals_detected': ['ya decid√≠', 'cu√°ndo empiezo']
            },
            'should_activate': True
        },
        {
            'name': 'M√∫ltiples se√±ales de compra',
            'intent_analysis': {
                'category': 'GENERAL_INQUIRY',
                'confidence': 0.6,
                'buying_signals_detected': ['me interesa', 'quiero m√°s informaci√≥n', 'c√≥mo empiezo']
            },
            'should_activate': True  # Por m√∫ltiples se√±ales
        },
        {
            'name': 'No intenci√≥n de compra',
            'intent_analysis': {
                'category': 'GENERAL_INQUIRY',
                'confidence': 0.7,
                'buying_signals_detected': []
            },
            'should_activate': False
        },
        {
            'name': 'Confianza baja',
            'intent_analysis': {
                'category': 'PURCHASE_INTENT_DIRECT',
                'confidence': 0.5,  # Bajo threshold
                'buying_signals_detected': ['tal vez']
            },
            'should_activate': False
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print(f"   Categor√≠a: {test_case['intent_analysis']['category']}")
        print(f"   Confianza: {test_case['intent_analysis']['confidence']}")
        print(f"   Se√±ales: {test_case['intent_analysis']['buying_signals_detected']}")
        
        should_activate = purchase_bonus_use_case.should_activate_purchase_bonus(test_case['intent_analysis'])
        expected = test_case['should_activate']
        
        if should_activate == expected:
            print(f"   ‚úÖ PASS - {'Activar√≠a bonos' if should_activate else 'No activar√≠a bonos'}")
        else:
            print(f"   ‚ùå FAIL - Esperado: {expected}, Obtenido: {should_activate}")
    
    print("\n" + "=" * 50)


async def test_workbook_bonuses():
    """Test obtenci√≥n de bonos workbook."""
    print("üß™ TESTING: Workbook Bonuses Retrieval")
    print("=" * 50)
    
    purchase_bonus_use_case = PurchaseBonusUseCase()
    
    # Test obtenci√≥n de bonos
    workbook_bonuses = await purchase_bonus_use_case.get_workbook_bonuses()
    
    print(f"üìö Bonos workbook encontrados: {len(workbook_bonuses)}")
    
    for i, bonus in enumerate(workbook_bonuses, 1):
        print(f"\n{i}. {bonus['title']}")
        print(f"   ID: {bonus['id']}")
        print(f"   Descripci√≥n: {bonus['description']}")
        print(f"   URL: {bonus['url']}")
        print(f"   Tipo: {bonus['type']}")
        print(f"   Sesi√≥n: {bonus['session']}")
    
    if workbook_bonuses:
        print("\n‚úÖ Bonos workbook cargados correctamente")
    else:
        print("\n‚ùå No se encontraron bonos workbook")
    
    print("\n" + "=" * 50)


async def test_purchase_bonus_message():
    """Test generaci√≥n de mensaje de bono por compra."""
    print("üß™ TESTING: Purchase Bonus Message Generation")  
    print("=" * 50)
    
    # Crear memoria de usuario de prueba
    user_memory = LeadMemory()
    user_memory.user_id = "test_user_001" 
    user_memory.name = "Juan P√©rez"
    user_memory.role = "Director de Marketing"
    user_memory.buyer_persona_match = "lucia_copypro"
    user_memory.interaction_count = 5
    user_memory.lead_score = 75
    
    # An√°lisis de intenci√≥n de compra
    intent_analysis = {
        'category': 'PURCHASE_INTENT_DIRECT',
        'confidence': 0.9,
        'buying_signals_detected': ['quiero comprarlo', 'c√≥mo pago'],
        'buyer_persona_match': 'lucia_copypro'
    }
    
    purchase_bonus_use_case = PurchaseBonusUseCase()
    
    # Generar mensaje de bono
    bonus_message = await purchase_bonus_use_case.generate_purchase_bonus_message(
        user_memory, intent_analysis
    )
    
    print("üìù MENSAJE DE BONO GENERADO:")
    print("-" * 30)
    print(bonus_message)
    print("-" * 30)
    
    # Verificar elementos clave
    checks = [
        ("Personalizaci√≥n con nombre", "Juan" in bonus_message),
        ("Menciona bono especial", "BONO" in bonus_message.upper()),
        ("Incluye URL de workbook", "https://coda.io" in bonus_message),
        ("Call-to-action presente", "inscripci√≥n" in bonus_message.lower() or "proceso" in bonus_message.lower()),
        ("ROI espec√≠fico por persona", "campa√±a" in bonus_message.lower())  # Para lucia_copypro
    ]
    
    print("\nüîç VERIFICACIONES:")
    for check_name, check_result in checks:
        status = "‚úÖ PASS" if check_result else "‚ùå FAIL"
        print(f"   {status} - {check_name}")
    
    print("\n" + "=" * 50)


async def test_memory_update():
    """Test actualizaci√≥n de memoria con intenci√≥n de compra."""
    print("üß™ TESTING: Memory Update with Purchase Intent")
    print("=" * 50)
    
    # Configurar sistema de memoria
    memory_manager = MemoryManager()
    memory_use_case = ManageUserMemoryUseCase(memory_manager)
    purchase_bonus_use_case = PurchaseBonusUseCase(memory_use_case=memory_use_case)
    
    user_id = "test_user_002"
    
    # Crear memoria inicial
    initial_memory = memory_use_case.get_user_memory(user_id)
    initial_memory.name = "Mar√≠a Gonz√°lez"
    initial_memory.role = "CEO"
    initial_score = initial_memory.lead_score
    initial_signals = len(initial_memory.buying_signals)
    
    print(f"üë§ Usuario: {initial_memory.name}")
    print(f"üìä Score inicial: {initial_score}")
    print(f"üéØ Se√±ales iniciales: {initial_signals}")
    
    # An√°lisis de intenci√≥n de compra
    intent_analysis = {
        'category': 'PURCHASE_READY_SIGNALS',
        'confidence': 0.85,
        'buying_signals_detected': ['ya decid√≠', 'cu√°ndo empiezo']
    }
    
    # Actualizar memoria
    await purchase_bonus_use_case.update_user_memory_with_purchase_intent(
        user_id, intent_analysis
    )
    
    # Verificar cambios
    updated_memory = memory_use_case.get_user_memory(user_id)
    final_score = updated_memory.lead_score
    final_signals = len(updated_memory.buying_signals)
    
    print(f"\nüìà DESPU√âS DE ACTUALIZACI√ìN:")
    print(f"üìä Score final: {final_score} (cambio: +{final_score - initial_score})")
    print(f"üéØ Se√±ales finales: {final_signals} (cambio: +{final_signals - initial_signals})")
    print(f"üî• Interest level: {updated_memory.interest_level}")
    
    # Verificar historial
    if updated_memory.message_history:
        latest_entry = updated_memory.message_history[-1]
        print(f"\nüìù √öltima entrada del historial:")
        print(f"   Acci√≥n: {latest_entry.get('action')}")
        print(f"   Categor√≠a: {latest_entry.get('category')}")
        print(f"   Confianza: {latest_entry.get('confidence')}")
    
    # Limpiar memoria de prueba
    memory_manager.clear_user_memory(user_id)
    
    print(f"\n‚úÖ Memoria actualizada correctamente")
    print("\n" + "=" * 50)


async def main():
    """Ejecutar todas las pruebas."""
    print("üöÄ INICIANDO TESTS DEL SISTEMA DE BONOS POR COMPRA")
    print("=" * 60)
    
    try:
        await test_purchase_intent_detection()
        await test_workbook_bonuses()
        await test_purchase_bonus_message()
        await test_memory_update()
        
        print("\nüéâ ¬°TODOS LOS TESTS COMPLETADOS!")
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN TESTS: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())