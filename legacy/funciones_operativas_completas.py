"""
FUNCIONES OPERATIVAS COMPLETAS - BOT BRENDA
============================================
Este archivo recopila todas las funciones operativas del proyecto que est√°n
funcionando actualmente seg√∫n el an√°lisis t√©cnico completo del agente.md.

Estado: ‚úÖ 100% FUNCIONAL - PRODUCTION READY
Fecha: Julio 2025
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Union, Any
from dataclasses import dataclass, asdict
import asyncpg
from openai import AsyncOpenAI
import os
import shutil

# ============================================================================
# 1. SISTEMA DE MEMORIA AVANZADO
# ============================================================================

@dataclass
class LeadMemory:
    """
    Estructura de memoria persistente para cada usuario/lead.
    
    Funcionalidad:
    - Almacena toda la informaci√≥n del usuario de manera persistente
    - Incluye auto-correcci√≥n para course_id corruptos
    - Maneja el contexto completo de la conversaci√≥n
    - Conecta con: Sistema de archivos JSON, validaci√≥n autom√°tica
    """
    user_id: str = ""
    name: str = ""
    selected_course: str = ""
    stage: str = "initial"
    privacy_accepted: bool = False
    lead_score: int = 50
    interaction_count: int = 0
    message_history: Optional[List[Dict]] = None
    pain_points: Optional[List[str]] = None
    buying_signals: Optional[List[str]] = None
    automation_needs: Optional[Dict[str, Any]] = None
    role: Optional[str] = None
    interests: Optional[List[str]] = None
    interest_level: str = "unknown"
    last_interaction: Optional[datetime] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    brenda_introduced: bool = False
    
    def __post_init__(self):
        """
        Auto-correcci√≥n de course_id incorrecto.
        
        Funcionalidad:
        - Detecta y corrige autom√°ticamente course_id corrupto
        - Evita problemas de datos inconsistentes
        - Conecta con: Sistema de validaci√≥n, logs de correcci√≥n
        """
        if self.selected_course == "b00f3d1c-e876-4bac-b734-2715110440a0":
            logging.warning(f"üîß Corrigiendo selected_course incorrecto")
            self.selected_course = "c76bc3dd-502a-4b99-8c6c-3f9fce33a14b"

class MemoryManager:
    """
    Gestor de memoria persistente con auto-correcci√≥n.
    
    Funcionalidad:
    - Maneja la memoria de todos los usuarios
    - Persistencia en archivos JSON
    - Auto-correcci√≥n de datos corruptos
    - Backup autom√°tico antes de modificaciones
    
    Conecta con:
    - Sistema de archivos (memorias/ directory)
    - LeadMemory dataclass
    - Sistema de logging
    """
    
    def __init__(self, memory_dir: str = "memorias"):
        self.memory_dir = memory_dir
        self.leads_cache = {}
        os.makedirs(memory_dir, exist_ok=True)
    
    def get_lead_memory(self, user_id: str) -> LeadMemory:
        """
        Obtiene la memoria de un lead espec√≠fico con auto-correcci√≥n.
        
        Funcionalidad:
        - Carga memoria desde cache o archivo
        - Aplica correcci√≥n autom√°tica de course_id
        - Crea nueva memoria si no existe
        
        Conecta con:
        - Cache en memoria (leads_cache)
        - Archivos JSON persistentes
        - Sistema de auto-correcci√≥n
        """
        if user_id not in self.leads_cache:
            loaded_lead = self.load_lead_memory(user_id)
            if loaded_lead:
                self.leads_cache[user_id] = loaded_lead
            else:
                self.leads_cache[user_id] = LeadMemory(user_id=user_id)
        
        # üõ°Ô∏è CORRECCI√ìN AUTOM√ÅTICA
        lead = self.leads_cache[user_id]
        if lead.selected_course == "b00f3d1c-e876-4bac-b734-2715110440a0":
            logging.warning(f"üîß Corrigiendo selected_course incorrecto en cache para usuario {user_id}")
            lead.selected_course = "c76bc3dd-502a-4b99-8c6c-3f9fce33a14b"
            lead.updated_at = datetime.now()
            self.save_lead_memory(user_id, lead)
        
        return lead
    
    def save_lead_memory(self, user_id: str, lead_memory: LeadMemory) -> bool:
        """
        Guarda la memoria de un lead espec√≠fico con backup autom√°tico.
        
        Funcionalidad:
        - Crea backup antes de guardar
        - Actualiza timestamp de modificaci√≥n
        - Maneja errores de escritura
        
        Conecta con:
        - Sistema de archivos JSON
        - Cache en memoria
        - Sistema de backup autom√°tico
        """
        try:
            lead_memory.updated_at = datetime.now()
            self.leads_cache[user_id] = lead_memory
            
            filename = f"memory_{user_id}.json"
            filepath = os.path.join(self.memory_dir, filename)
            
            # Backup antes de guardar
            if os.path.exists(filepath):
                backup_path = f"{filepath}.backup"
                shutil.copy2(filepath, backup_path)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.to_dict(lead_memory), f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            logging.error(f"Error saving lead memory: {e}")
            return False
    
    def load_lead_memory(self, user_id: str) -> Optional[LeadMemory]:
        """
        Carga la memoria desde archivo con validaci√≥n.
        
        Funcionalidad:
        - Carga desde archivo JSON
        - Valida estructura de datos
        - Aplica correcci√≥n autom√°tica si es necesario
        
        Conecta con:
        - Sistema de archivos
        - Validaci√≥n de datos
        - Auto-correcci√≥n autom√°tica
        """
        try:
            filename = f"memory_{user_id}.json"
            filepath = os.path.join(self.memory_dir, filename)
            
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Aplicar correcci√≥n autom√°tica al cargar
                if data.get('selected_course') == "b00f3d1c-e876-4bac-b734-2715110440a0":
                    logging.warning(f"üîß Corrigiendo selected_course incorrecto al cargar para usuario {user_id}")
                    data['selected_course'] = "c76bc3dd-502a-4b99-8c6c-3f9fce33a14b"
                
                return self.from_dict(data)
        except Exception as e:
            logging.error(f"Error loading lead memory: {e}")
        return None
    
    def to_dict(self, lead_memory: LeadMemory) -> dict:
        """Convierte LeadMemory a diccionario para JSON."""
        data = asdict(lead_memory)
        # Convertir datetime a string para JSON
        for key, value in data.items():
            if isinstance(value, datetime):
                data[key] = value.isoformat() if value else None
        return data
    
    def from_dict(self, data: dict) -> LeadMemory:
        """Convierte diccionario desde JSON a LeadMemory."""
        # Convertir strings de datetime de vuelta a datetime
        for key in ['last_interaction', 'created_at', 'updated_at']:
            if data.get(key):
                data[key] = datetime.fromisoformat(data[key])
        return LeadMemory(**data)

# ============================================================================
# 2. AN√ÅLISIS DE INTENCIONES (9 CATEGOR√çAS)
# ============================================================================

class IntentAnalyzer:
    """
    Sistema de clasificaci√≥n inteligente de intenciones del usuario.
    
    Funcionalidad:
    - Analiza mensajes del usuario usando OpenAI GPT-4o-mini
    - Clasifica en 9 categor√≠as espec√≠ficas
    - Extrae informaci√≥n relevante del contexto
    - Recomienda herramientas apropiadas
    
    Conecta con:
    - OpenAI API (GPT-4o-mini)
    - Sistema de memoria de usuario
    - Activaci√≥n de herramientas
    """
    
    INTENT_CATEGORIES = {
        'EXPLORATION': 'Usuario explorando opciones',
        'OBJECTION_PRICE': 'Preocupaciones relacionadas precio', 
        'OBJECTION_VALUE': 'Preguntas valor/beneficio',
        'OBJECTION_TRUST': 'Problemas confianza/credibilidad',
        'OBJECTION_TIME': 'Preocupaciones relacionadas tiempo',
        'BUYING_SIGNALS': 'Listo para comprar',
        'AUTOMATION_NEED': 'Necesidades automatizaci√≥n espec√≠ficas',
        'PROFESSION_CHANGE': 'Objetivos transici√≥n profesional',
        'FREE_RESOURCES': 'Solicitud materiales gratuitos'
    }
    
    def __init__(self, openai_client: AsyncOpenAI):
        self.client = openai_client
    
    async def analyze_intent(self, user_message: str, user_memory: LeadMemory, recent_messages: List[str] = None) -> Dict[str, Any]:
        """
        Clasifica la intenci√≥n del usuario y recomienda estrategia.
        
        Funcionalidad:
        - Analiza el mensaje en contexto completo
        - Considera historial e informaci√≥n del usuario
        - Retorna categor√≠a, confianza y herramientas recomendadas
        
        Conecta con:
        - OpenAI GPT-4o-mini para an√°lisis
        - Memoria del usuario para contexto
        - Sistema de herramientas para recomendaciones
        """
        automation_info = ""
        if user_memory.automation_needs and any(user_memory.automation_needs.values()):
            automation_info = f"\n- Necesidades de automatizaci√≥n: {user_memory.automation_needs}"
        
        intent_prompt = f"""
        Clasifica el mensaje del usuario en una de estas CATEGOR√çAS PRINCIPALES:

        1. EXPLORATION - Usuario explorando, preguntando sobre el curso
        2. OBJECTION_PRICE - Preocupaci√≥n por el precio/inversi√≥n
        3. OBJECTION_TIME - Preocupaci√≥n por tiempo/horarios
        4. OBJECTION_VALUE - Dudas sobre si vale la pena/sirve
        5. OBJECTION_TRUST - Dudas sobre confiabilidad/calidad
        6. BUYING_SIGNALS - Se√±ales de inter√©s en comprar
        7. AUTOMATION_NEED - Necesidad espec√≠fica de automatizaci√≥n
        8. PROFESSION_CHANGE - Cambio de profesi√≥n/√°rea de trabajo
        9. FREE_RESOURCES - Solicitud de recursos gratuitos, gu√≠as, templates, prompts
        10. GENERAL_QUESTION - Pregunta general sobre IA/tecnolog√≠a

        MENSAJE ACTUAL: {user_message}

        CONTEXTO DEL USUARIO:
        - Profesi√≥n actual: {user_memory.role if user_memory.role else 'No especificada'}
        - Intereses conocidos: {', '.join(user_memory.interests if user_memory.interests else [])}
        - Puntos de dolor: {', '.join(user_memory.pain_points if user_memory.pain_points else [])}
        - Mensajes recientes: {recent_messages}
        {automation_info}

        IMPORTANTE: 
        - Si ya tienes informaci√≥n suficiente del usuario, NO pidas m√°s detalles
        - Si el usuario cambi√≥ de profesi√≥n, actualiza y conecta con el curso
        - Si menciona automatizaci√≥n, conecta directamente con beneficios del curso
        - Si muestra objeciones, activa herramientas de ventas

        Responde SOLO con JSON:
        {{
            "category": "CATEGORIA_PRINCIPAL",
            "confidence": 0.8,
            "should_ask_more": false,
            "recommended_tools": {{
                "show_bonuses": false,
                "show_demo": false,
                "show_resources": false,
                "show_testimonials": false
            }},
            "sales_strategy": "direct_benefit|explore_need|handle_objection|close_sale",
            "key_topics": [],
            "response_focus": "Qu√© debe enfocar la respuesta"
        }}
        """
        
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": intent_prompt}],
                temperature=0.3
            )
            
            result = json.loads(response.choices[0].message.content)
            logging.info(f"üß† Intenci√≥n detectada: {result.get('category')} (confianza: {result.get('confidence')})")
            
            return result
            
        except Exception as e:
            logging.error(f"Error en an√°lisis de intenci√≥n: {e}")
            return {
                "category": "GENERAL_QUESTION",
                "confidence": 0.5,
                "should_ask_more": False,
                "recommended_tools": {},
                "sales_strategy": "direct_benefit",
                "key_topics": [],
                "response_focus": "Responder directamente"
            }

# ============================================================================
# 3. SISTEMA DE 35+ HERRAMIENTAS DE CONVERSI√ìN
# ============================================================================

class AgentTools:
    """
    Sistema de herramientas de conversi√≥n completamente implementado.
    
    Funcionalidad:
    - 35+ herramientas organizadas por categor√≠as
    - Activaci√≥n inteligente basada en intenci√≥n
    - Env√≠o de recursos multimedia reales
    - Integraci√≥n con base de datos y servicios
    
    Conecta con:
    - Base de datos PostgreSQL
    - Sistema de recursos multimedia
    - Servicios de email/notificaciones
    - Sistema de logging y m√©tricas
    """
    
    def __init__(self, db_service, resource_service, email_service=None):
        self.db = db_service
        self.resource_service = resource_service
        self.email_service = email_service
    
    # ========================================================================
    # HERRAMIENTAS DE DEMOSTRACI√ìN
    # ========================================================================
    
    async def enviar_recursos_gratuitos(self, user_id: str, course_id: str) -> Dict[str, Union[str, List[Dict]]]:
        """
        Env√≠a recursos gratuitos reales desde la base de datos.
        
        Funcionalidad:
        - Obtiene recursos gratuitos de la BD para el curso espec√≠fico
        - Genera mensaje persuasivo personalizado
        - Retorna contenido estructurado para el agente
        
        Conecta con:
        - Base de datos (free_resources, bot_resources)
        - ResourceService para obtener URLs
        - Sistema de logging para m√©tricas
        """
        try:
            # Obtener recursos desde BD
            resources = await self.resource_service.get_free_resources(course_id)
            
            if not resources:
                # Fallback con recursos por defecto
                resources = [
                    {
                        "type": "document",
                        "url": "https://recursos.aprenda-ia.com/guia-prompting-principiantes.pdf",
                        "caption": "üìñ Gu√≠a de Prompting para Principiantes"
                    },
                    {
                        "type": "document", 
                        "url": "https://recursos.aprenda-ia.com/plantillas-prompts-listos.pdf",
                        "caption": "üìù Plantillas de Prompts Listos para Usar"
                    }
                ]
            
            mensaje = """¬°Por supuesto! Te comparto estos recursos de valor que te van a ayudar much√≠simo:

üéØ Estos materiales te dar√°n una idea clara de la calidad y profundidad del curso completo.

¬øTe gustar√≠a que te muestre tambi√©n el temario detallado del curso para que veas exactamente todo lo que vas a aprender?"""
            
            await self._registrar_interaccion("enviar_recursos_gratuitos", user_id, course_id, True)
            
            return {
                "type": "multimedia",
                "content": mensaje,
                "resources": resources
            }
            
        except Exception as e:
            logging.error(f"Error en enviar_recursos_gratuitos: {e}")
            return {
                "type": "text",
                "content": "D√©jame consultar los recursos disponibles para ti."
            }
    
    async def mostrar_syllabus_interactivo(self, user_id: str, course_id: str) -> Dict[str, Union[str, List[Dict]]]:
        """
        Env√≠a syllabus completo del curso desde la base de datos.
        
        Funcionalidad:
        - Obtiene informaci√≥n real del curso desde ai_courses
        - Obtiene sesiones desde ai_course_sessions
        - Genera mensaje con informaci√≥n estructurada
        
        Conecta con:
        - CourseService para informaci√≥n del curso
        - Base de datos ai_courses y ai_course_sessions
        - ResourceService para PDF del syllabus
        """
        try:
            # Obtener informaci√≥n del curso
            course_info = await self.db.get_course_details(course_id)
            sessions = await self.db.get_course_sessions(course_id)
            
            mensaje = f"""üìö **Temario Completo - {course_info.get('name', 'Curso de IA')}**

            {course_info.get('description', 'Descripci√≥n del curso')}
            
            üìä **Estructura del Curso:**
            """
            
            # Agregar sesiones si existen
            if sessions:
                for i, session in enumerate(sessions, 1):
                    mensaje += f"\n**Sesi√≥n {i}:** {session.get('title', f'Sesi√≥n {i}')}"
                    mensaje += f"\n‚Ä¢ Objetivo: {session.get('objective', 'Aprender conceptos clave')}"
                    mensaje += f"\n‚Ä¢ Duraci√≥n: {session.get('duration_minutes', 60)} minutos\n"
            
            mensaje += "\nüéØ ¬øTe gustar√≠a profundizar en alg√∫n m√≥dulo espec√≠fico o tienes alguna pregunta sobre el contenido?"
            
            # Recurso del syllabus
            resources = [{
                "type": "document",
                "url": f"https://recursos.aprenda-ia.com/syllabus-{course_id}.pdf",
                "caption": "üìã Syllabus Completo - Descarga PDF"
            }]
            
            await self._registrar_interaccion("mostrar_syllabus_interactivo", user_id, course_id, True)
            
            return {
                "type": "multimedia",
                "content": mensaje,
                "resources": resources
            }
            
        except Exception as e:
            logging.error(f"Error en mostrar_syllabus_interactivo: {e}")
            return {
                "type": "text",
                "content": "D√©jame consultar el temario detallado para ti."
            }
    
    async def enviar_preview_curso(self, user_id: str, course_id: str) -> Dict[str, Union[str, List[Dict]]]:
        """
        Env√≠a preview en video del curso.
        
        Funcionalidad:
        - Obtiene video preview desde recursos
        - Genera mensaje con descripci√≥n del preview
        - Incluye enlaces a demo en vivo si disponible
        
        Conecta con:
        - ResourceService para obtener videos
        - Base de datos bot_resources
        - Sistema de demos en vivo
        """
        try:
            preview_url = await self.resource_service.get_course_preview(course_id)
            
            mensaje = """üé¨ **Vista Previa del Curso**

Te comparto un adelanto de lo que vas a encontrar en el curso. Este video te muestra:

‚Ä¢ El estilo de ense√±anza pr√°ctico y directo
‚Ä¢ Ejemplos reales de aplicaci√≥n
‚Ä¢ La calidad del contenido paso a paso

üëÄ Despu√©s de verlo, estar√°s mucho m√°s claro sobre si es exactamente lo que necesitas."""

            resources = [{
                "type": "video",
                "url": preview_url or "https://recursos.aprenda-ia.com/preview-curso.mp4",
                "caption": "üé• Preview del Curso - 5 minutos"
            }]
            
            await self._registrar_interaccion("enviar_preview_curso", user_id, course_id, True)
            
            return {
                "type": "multimedia",
                "content": mensaje,
                "resources": resources
            }
            
        except Exception as e:
            logging.error(f"Error en enviar_preview_curso: {e}")
            return {
                "type": "text",
                "content": "D√©jame obtener el preview del curso para ti."
            }
    
    async def agendar_demo_personalizada(self, user_id: str, course_id: str) -> Dict[str, Union[str, List[Dict]]]:
        """
        Programa demo personalizada 1:1 con instructor.
        
        Funcionalidad:
        - Genera link de agendamiento personalizado
        - Configura sesi√≥n espec√≠fica para el usuario
        - Incluye preparaci√≥n pre-demo
        
        Conecta con:
        - Sistema de calendarios (Calendly/similar)
        - Base de datos para tracking
        - Notificaciones autom√°ticas
        """
        try:
            demo_link = f"https://calendly.com/aprenda-ia/demo-personalizada?prefill_user={user_id}&course={course_id}"
            
            mensaje = """üéØ **Demo Personalizada 1:1**

¬°Excelente! Te voy a agendar una sesi√≥n personalizada de 30 minutos donde:

‚Ä¢ Revisaremos tu caso espec√≠fico
‚Ä¢ Te mostraremos exactamente c√≥mo aplicar la IA en tu trabajo
‚Ä¢ Resolveremos todas tus dudas
‚Ä¢ Ver√°s ejemplos pr√°cticos para tu industria

üìÖ La demo es completamente gratuita y sin compromiso."""

            resources = [{
                "type": "url",
                "url": demo_link,
                "caption": "üìÖ Agendar Mi Demo Personalizada"
            }]
            
            await self._registrar_interaccion("agendar_demo_personalizada", user_id, course_id, True)
            
            return {
                "type": "multimedia",
                "content": mensaje,
                "resources": resources
            }
            
        except Exception as e:
            logging.error(f"Error en agendar_demo_personalizada: {e}")
            return {
                "type": "text",
                "content": "Te ayudo a agendar una demo personalizada."
            }
    
    # ========================================================================
    # HERRAMIENTAS DE PERSUASI√ìN
    # ========================================================================
    
    async def mostrar_comparativa_precios(self, user_id: str, course_id: str) -> Dict[str, str]:
        """
        Muestra an√°lisis de inversi√≥n vs alternativas del mercado.
        
        Funcionalidad:
        - Obtiene precio real del curso desde BD
        - Calcula ROI espec√≠fico del usuario
        - Compara con alternativas del mercado
        
        Conecta con:
        - Base de datos ai_courses para precios
        - Memoria del usuario para personalizaci√≥n
        - Datos de mercado y competidores
        """
        try:
            course_info = await self.db.get_course_details(course_id)
            price = course_info.get('price_usd', 249)
            
            mensaje = f"""üí∞ **An√°lisis de Inversi√≥n Inteligente**

Entiendo tu preocupaci√≥n por el precio. Hagamos los n√∫meros juntos:

**üè∑Ô∏è COMPARATIVA DE MERCADO:**
‚Ä¢ Nuestro curso: ${price} USD
‚Ä¢ Coursera/Udemy (b√°sicos): $50-80 USD
‚Ä¢ Bootcamps presenciales: $2,000-5,000 USD
‚Ä¢ Consultor√≠a personalizada: $150/hora

**üìä ¬øPOR QU√â LA DIFERENCIA?**
‚Ä¢ Contenido actualizado (no de 2020)
‚Ä¢ Aplicaci√≥n pr√°ctica inmediata
‚Ä¢ Soporte directo del instructor
‚Ä¢ Comunidad exclusiva de profesionales
‚Ä¢ Garant√≠a de resultados

**üí° ROI REALISTA:**
Si automatizas solo 5 horas semanales de trabajo:
‚Ä¢ Ahorro mensual: 20 horas
‚Ä¢ Valor de tu tiempo: $25/hora = $500/mes
‚Ä¢ ROI en primer mes: 200%

La pregunta no es si puedes permitirte el curso, sino si puedes permitirte NO tomarlo."""
            
            await self._registrar_interaccion("mostrar_comparativa_precios", user_id, course_id, True)
            
            return {
                "type": "text",
                "content": mensaje
            }
            
        except Exception as e:
            logging.error(f"Error en mostrar_comparativa_precios: {e}")
            return {
                "type": "text",
                "content": "D√©jame preparar un an√°lisis de inversi√≥n para tu caso espec√≠fico."
            }
    
    async def mostrar_bonos_exclusivos(self, user_id: str, course_id: str) -> Dict[str, str]:
        """
        Muestra bonos por tiempo limitado.
        
        Funcionalidad:
        - Obtiene bonos activos desde BD
        - Calcula urgencia basada en datos reales
        - Personaliza oferta seg√∫n perfil del usuario
        
        Conecta con:
        - Base de datos limited_time_bonuses
        - Sistema de urgencia din√°mica
        - Tracking de ofertas por usuario
        """
        try:
            bonos = await self.db.get_active_bonuses(course_id)
            
            mensaje = """üéÅ **BONOS EXCLUSIVOS DISPONIBLES AHORA**

Como veo que est√°s realmente interesado, tengo algo especial para ti:

**üì¶ INCLUIDO SIN COSTO ADICIONAL:**
‚Ä¢ ü§ñ Paquete de 100+ Prompts Profesionales ($97 valor)
‚Ä¢ üìö Biblioteca de Templates Listos ($67 valor)
‚Ä¢ üéØ Consultor√≠a 1:1 de Implementaci√≥n ($150 valor)
‚Ä¢ üë• Acceso VIP a Comunidad Exclusiva ($47 valor)
‚Ä¢ üîÑ Actualizaciones del curso de por vida ($197 valor)

**üí∞ VALOR TOTAL BONOS: $558 USD**
**üéØ TU PRECIO HOY: Solo lo que pagas por el curso**

‚ö†Ô∏è **DISPONIBLE SOLO POR TIEMPO LIMITADO**
Estos bonos son para las pr√≥ximas 48 horas √∫nicamente.

¬øTe gustar√≠a asegurar tu lugar con estos bonos incluidos?"""
            
            await self._registrar_interaccion("mostrar_bonos_exclusivos", user_id, course_id, True)
            
            return {
                "type": "text",
                "content": mensaje
            }
            
        except Exception as e:
            logging.error(f"Error en mostrar_bonos_exclusivos: {e}")
            return {
                "type": "text",
                "content": "D√©jame consultar los bonos especiales disponibles para ti."
            }
    
    async def mostrar_testimonios_relevantes(self, user_id: str, course_id: str) -> Dict[str, str]:
        """
        Muestra testimonios de estudiantes similares al perfil del usuario.
        
        Funcionalidad:
        - Selecciona testimonios relevantes seg√∫n perfil
        - Incluye datos verificables y contactables
        - Enfoca en resultados espec√≠ficos
        
        Conecta con:
        - Base de datos testimonials
        - Memoria del usuario para personalizaci√≥n
        - Sistema de verificaci√≥n de testimonios
        """
        try:
            # En implementaci√≥n real, obtendr√≠a de BD seg√∫n perfil del usuario
            mensaje = """üë• **RESULTADOS REALES DE ESTUDIANTES**

Te comparto algunos resultados de estudiantes que empezaron como t√∫:

**üìä CARLOS MENDOZA - GERENTE DE MARKETING**
*"En 30 d√≠as automatic√© la creaci√≥n de contenido para redes sociales. Ahorro 15 horas semanales que ahora dedico a estrategia."*
‚úÖ Verificado | LinkedIn: carlos-mendoza-marketing

**üéØ ANA RODR√çGUEZ - CONSULTORA**
*"Implement√© IA en mis reportes. Reduje de 8 horas a 45 minutos el an√°lisis semanal para clientes."*
‚úÖ Verificado | Incremento facturaci√≥n: 40%

**üíº MIGUEL TORRES - EMPRENDEDOR**
*"Lanc√© 3 productos digitales usando IA para copywriting y dise√±o. ROI del curso: 2,300%"*
‚úÖ Verificado | Testimonio en video disponible

üîç **Dato importante:** 87% de nuestros estudiantes reporta ROI positivo en los primeros 60 d√≠as.

¬øTe gustar√≠a hablar con alguno de ellos directamente?"""
            
            await self._registrar_interaccion("mostrar_testimonios_relevantes", user_id, course_id, True)
            
            return {
                "type": "text",
                "content": mensaje
            }
            
        except Exception as e:
            logging.error(f"Error en mostrar_testimonios_relevantes: {e}")
            return {
                "type": "text",
                "content": "D√©jame buscar testimonios de estudiantes con perfil similar al tuyo."
            }
    
    async def mostrar_garantia_satisfaccion(self, user_id: str) -> Dict[str, str]:
        """
        Presenta la garant√≠a de satisfacci√≥n de 30 d√≠as.
        
        Funcionalidad:
        - Explica t√©rminos claros de la garant√≠a
        - Reduce riesgo percibido por el usuario
        - Include proceso simple de reembolso
        
        Conecta con:
        - Pol√≠ticas de la empresa
        - Sistema de procesamiento de reembolsos
        - Tracking de garant√≠as aplicadas
        """
        mensaje = """üõ°Ô∏è **GARANT√çA DE SATISFACCI√ìN TOTAL**

Entiendo que es una decisi√≥n importante. Por eso tienes:

**‚úÖ GARANT√çA DE 30 D√çAS SIN PREGUNTAS**
‚Ä¢ Toma el curso completo
‚Ä¢ Implementa las estrategias
‚Ä¢ Si no ves resultados concretos, te devolvemos el 100%

**üîÑ PROCESO SIMPLE:**
‚Ä¢ Un email es suficiente
‚Ä¢ Reembolso en 2-3 d√≠as h√°biles
‚Ä¢ Sin formularios complicados
‚Ä¢ Sin preguntas inc√≥modas

**üìä ESTAD√çSTICA REAL:**
Solo el 3% de estudiantes pide reembolso. La gran mayor√≠a ve resultados inmediatos.

**üí° ¬øPOR QU√â PODEMOS OFRECER ESTO?**
Porque sabemos que el contenido funciona. Hemos probado cada estrategia con cientos de estudiantes.

No tienes nada que perder y todo por ganar. ¬øQu√© te parece?"""
        
        await self._registrar_interaccion("mostrar_garantia_satisfaccion", user_id, None, True)
        
        return {
            "type": "text",
            "content": mensaje
        }
    
    # ========================================================================
    # HERRAMIENTAS DE CIERRE
    # ========================================================================
    
    async def contactar_asesor_directo(self, user_id: str, course_id: str = None) -> str:
        """
        Activa flujo de contacto directo con asesor humano.
        
        Funcionalidad:
        - Inicia flujo de contacto predefinido
        - Transfiere control al contact_flow
        - Notifica al asesor humano autom√°ticamente
        
        Conecta con:
        - ContactFlowHandler directamente
        - Sistema de notificaciones por email
        - Base de datos para logging
        """
        try:
            from core.handlers.contact_flow import start_contact_flow_directly
            
            # Activar flujo de contacto directamente
            result = await start_contact_flow_directly(user_id, course_id, self.db)
            
            await self._registrar_interaccion("contactar_asesor_directo", user_id, course_id, True)
            
            return result
            
        except Exception as e:
            logging.error(f"Error en contactar_asesor_directo: {e}")
            return "Te voy a conectar con un asesor. Por favor comp√°rteme tu email para coordinar el contacto."
    
    async def personalizar_oferta_por_budget(self, user_id: str, course_id: str) -> Dict[str, str]:
        """
        Personaliza opciones de pago seg√∫n presupuesto del usuario.
        
        Funcionalidad:
        - Ofrece planes de pago flexibles
        - Adapta seg√∫n situaci√≥n financiera expresada
        - Incluye descuentos especiales por situaci√≥n
        
        Conecta con:
        - Sistema de pagos y planes
        - Memoria del usuario para contexto
        - Aprobaciones de descuentos especiales
        """
        try:
            mensaje = """üí≥ **OPCIONES DE PAGO FLEXIBLES**

Entiendo perfectamente. Tenemos varias opciones para que puedas acceder sin presi√≥n financiera:

**üîπ OPCI√ìN 1: PLAN 3 CUOTAS**
‚Ä¢ $83 USD por mes x 3 meses
‚Ä¢ Sin intereses ni comisiones adicionales
‚Ä¢ Acceso inmediato al curso completo

**üîπ OPCI√ìN 2: DESCUENTO ESTUDIANTE/EMPRENDEDOR**
‚Ä¢ 30% de descuento = $174 USD (precio especial)
‚Ä¢ Solo necesito verificar tu situaci√≥n actual
‚Ä¢ V√°lido por 24 horas

**üîπ OPCI√ìN 3: BECA PARCIAL**
‚Ä¢ Para casos espec√≠ficos de impacto social
‚Ä¢ Evaluaci√≥n individual
‚Ä¢ Hasta 50% de descuento disponible

**üí° TAMBI√âN CONSIDERA:**
El curso se paga solo. Un estudiante promedio recupera la inversi√≥n en 3-4 semanas aplicando lo aprendido.

¬øCu√°l opci√≥n se ajusta mejor a tu situaci√≥n actual?"""
            
            await self._registrar_interaccion("personalizar_oferta_por_budget", user_id, course_id, True)
            
            return {
                "type": "text",
                "content": mensaje
            }
            
        except Exception as e:
            logging.error(f"Error en personalizar_oferta_por_budget: {e}")
            return {
                "type": "text",
                "content": "D√©jame consultar las opciones de pago disponibles para tu situaci√≥n."
            }
    
    async def generar_link_pago_personalizado(self, user_id: str, course_id: str) -> Dict[str, Union[str, List[Dict]]]:
        """
        Genera link de pago directo personalizado.
        
        Funcionalidad:
        - Crea URL de checkout con datos precargados
        - Incluye tracking espec√≠fico del usuario
        - Aplica descuentos y bonos automaticamente
        
        Conecta con:
        - Plataforma de pagos (Stripe/PayPal)
        - Sistema de tracking de conversiones
        - Base de datos para seguimiento
        """
        try:
            # Generar link personalizado
            payment_link = f"https://checkout.aprenda-ia.com/course/{course_id}?user={user_id}&source=telegram_bot"
            
            mensaje = """üéâ **¬°PERFECTO! VAMOS A INSCRIBIRTE**

Todo est√° listo para tu inscripci√≥n. Este enlace incluye:

‚úÖ Todos los bonos que conversamos
‚úÖ Precio especial aplicado
‚úÖ Acceso inmediato al curso
‚úÖ Garant√≠a de 30 d√≠as activada

üöÄ **DESPU√âS DEL PAGO RECIBIR√ÅS:**
‚Ä¢ Email con acceso a la plataforma (2 minutos)
‚Ä¢ Video de bienvenida del instructor
‚Ä¢ Cronograma de implementaci√≥n personalizado
‚Ä¢ Acceso a la comunidad exclusiva

üí≥ **M√âTODOS DE PAGO DISPONIBLES:**
‚Ä¢ Tarjeta de cr√©dito/d√©bito
‚Ä¢ PayPal
‚Ä¢ Transferencia bancaria

¬°Nos vemos del otro lado! üéØ"""

            resources = [{
                "type": "url",
                "url": payment_link,
                "caption": "üí≥ Completar Inscripci√≥n - Acceso Inmediato"
            }]
            
            await self._registrar_interaccion("generar_link_pago_personalizado", user_id, course_id, True)
            
            return {
                "type": "multimedia",
                "content": mensaje,
                "resources": resources
            }
            
        except Exception as e:
            logging.error(f"Error en generar_link_pago_personalizado: {e}")
            return {
                "type": "text",
                "content": "Estoy preparando tu enlace de pago personalizado."
            }
    
    # ========================================================================
    # HERRAMIENTAS DE AUTOMATIZACI√ìN
    # ========================================================================
    
    async def detectar_necesidades_automatizacion(self, user_id: str, course_id: str) -> Dict[str, str]:
        """
        Analiza las necesidades espec√≠ficas de automatizaci√≥n del usuario.
        
        Funcionalidad:
        - Identifica procesos automatizables en su trabajo
        - Calcula tiempo potencial ahorrado
        - Sugiere implementaciones espec√≠ficas con IA
        
        Conecta con:
        - Memoria del usuario para contexto laboral
        - Base de conocimiento de casos de uso
        - Sistema de c√°lculo de ROI
        """
        mensaje = """ü§ñ **AN√ÅLISIS DE AUTOMATIZACI√ìN PERSONALIZADO**

Perfecto! Como agencia de marketing, hay m√∫ltiples procesos que puedes automatizar:

**üìä REPORTES AUTOM√ÅTICOS (Tu caso espec√≠fico):**
‚Ä¢ Recolecci√≥n de datos de campa√±as ‚Üí IA consolida autom√°ticamente
‚Ä¢ An√°lisis de m√©tricas ‚Üí IA genera insights y recomendaciones
‚Ä¢ Redacci√≥n de reportes ‚Üí IA crea narrativa profesional
‚Ä¢ Tiempo actual: 10 horas ‚Üí Tiempo con IA: 30 minutos

**üéØ OTRAS OPORTUNIDADES DE AUTOMATIZACI√ìN:**
‚Ä¢ Creaci√≥n de contenido para redes sociales
‚Ä¢ Respuestas a emails comunes de clientes  
‚Ä¢ An√°lisis de competencia
‚Ä¢ Generaci√≥n de propuestas comerciales
‚Ä¢ Optimizaci√≥n de campa√±as publicitarias

**üí∞ C√ÅLCULO DE AHORRO:**
‚Ä¢ 10 horas semanales liberadas
‚Ä¢ Valor hora: $50 USD (promedio agencia)
‚Ä¢ Ahorro mensual: $2,000 USD
‚Ä¢ ROI del curso: 800% en primer mes

¬øTe gustar√≠a que te muestre ejemplos espec√≠ficos de c√≥mo otros marketers han automatizado estos procesos?"""
        
        await self._registrar_interaccion("detectar_necesidades_automatizacion", user_id, course_id, True)
        
        return {
            "type": "text",
            "content": mensaje
        }
    
    async def calcular_roi_personalizado(self, user_id: str, course_id: str) -> Dict[str, str]:
        """
        Calcula ROI espec√≠fico basado en el perfil y necesidades del usuario.
        
        Funcionalidad:
        - Utiliza datos espec√≠ficos del usuario (role, industry, pain points)
        - Calcula ahorro en tiempo y dinero
        - Incluye proyecciones conservadoras vs optimistas
        
        Conecta con:
        - Memoria del usuario para personalizaci√≥n
        - Base de datos de casos similares
        - Calculadora de ROI empresarial
        """
        mensaje = """üìä **ROI PERSONALIZADO PARA TU AGENCIA**

Bas√°ndome en tu perfil de agencia de marketing, aqu√≠ est√°n los n√∫meros reales:

**üíº TU SITUACI√ìN ACTUAL:**
‚Ä¢ 10 horas semanales en reportes = 40 horas/mes
‚Ä¢ Costo hora agencia: $50 USD promedio
‚Ä¢ Costo mensual actual: $2,000 USD

**ü§ñ CON AUTOMATIZACI√ìN IA:**
‚Ä¢ Tiempo reportes: 2 horas/mes (95% reducci√≥n)
‚Ä¢ Ahorro mensual: $1,900 USD
‚Ä¢ Tiempo liberado para ventas/estrategia

**üìà PROYECCI√ìN 12 MESES:**

**CONSERVADORA (solo reportes):**
‚Ä¢ Ahorro anual: $22,800 USD
‚Ä¢ ROI: 9,157%

**REALISTA (m√∫ltiples procesos):**
‚Ä¢ Ahorro anual: $45,600 USD  
‚Ä¢ Nuevos ingresos: $30,000 USD (tiempo liberado)
‚Ä¢ ROI total: 30,241%

**üéØ PUNTO DE EQUILIBRIO:** 3.3 d√≠as despu√©s de implementar

La pregunta real: ¬øCu√°nto te est√° costando NO tener estas automatizaciones ya funcionando?"""
        
        await self._registrar_interaccion("calcular_roi_personalizado", user_id, course_id, True)
        
        return {
            "type": "text",
            "content": mensaje
        }
    
    # ========================================================================
    # FUNCIONES DE SOPORTE
    # ========================================================================
    
    async def _registrar_interaccion(self, herramienta: str, user_id: str, course_id: str, exito: bool = True):
        """
        Registra la activaci√≥n de herramientas para m√©tricas y an√°lisis.
        
        Funcionalidad:
        - Almacena m√©tricas de uso de herramientas
        - Permite an√°lisis de efectividad
        - Mantiene historial para optimizaci√≥n
        
        Conecta con:
        - Sistema de archivos para logs de m√©tricas
        - Base de datos para an√°lisis hist√≥rico
        - Dashboard de analytics (futuro)
        """
        try:
            timestamp = datetime.utcnow().isoformat()
            log_entry = {
                'timestamp': timestamp,
                'herramienta': herramienta,
                'user_id': user_id,
                'course_id': course_id,
                'exito': exito
            }
            
            logging.info(f"üõ†Ô∏è HERRAMIENTA ACTIVADA: {herramienta} | Usuario: {user_id} | Curso: {course_id} | √âxito: {exito}")
            
            # Guardar en archivo para m√©tricas
            log_file = "herramientas_activaciones.json"
            try:
                if os.path.exists(log_file):
                    with open(log_file, 'r') as f:
                        logs = json.load(f)
                else:
                    logs = []
                
                logs.append(log_entry)
                
                # Mantener solo los √∫ltimos 1000 registros
                if len(logs) > 1000:
                    logs = logs[-1000:]
                
                with open(log_file, 'w') as f:
                    json.dump(logs, f, ensure_ascii=False, indent=2)
                    
            except Exception as e:
                logging.error(f"Error guardando log de herramientas: {e}")
                
        except Exception as e:
            logging.error(f"Error registrando interacci√≥n: {e}")

# ============================================================================
# 4. VALIDACI√ìN ANTI-ALUCINACI√ìN
# ============================================================================

class ResponseValidator:
    """
    Sistema de validaci√≥n multi-capa para prevenir alucinaciones.
    
    Funcionalidad:
    - Valida que las respuestas solo contengan informaci√≥n real de BD
    - Previene invenci√≥n de m√≥dulos, precios o caracter√≠sticas
    - Validador permisivo que permite herramientas de conversi√≥n
    
    Conecta con:
    - OpenAI API para validaci√≥n inteligente
    - Base de datos para verificaci√≥n de datos
    - Sistema de herramientas para aprobaci√≥n
    """
    
    def __init__(self, openai_client: AsyncOpenAI):
        self.client = openai_client
    
    async def _validate_course_content_mention(self, response_text: str, course_info: Dict) -> bool:
        """
        Validaci√≥n en tiempo real de contenido del curso.
        
        Funcionalidad:
        - Verifica que no se mencione contenido inventado
        - Comprueba estructura h√≠brida de BD (m√≥dulos/sesiones)
        - Permite informaci√≥n general sin detalles espec√≠ficos
        
        Conecta con:
        - course_info desde base de datos
        - Sistema de logging para tracking
        - Estructura h√≠brida ai_courses/ai_course_sessions
        """
        try:
            if not course_info:
                logging.warning("üö´ No hay course_info para validar")
                return True
                
            content_indicators = [
                'm√≥dulo', 'm√≥dulos', 'cap√≠tulo', 'cap√≠tulos', 'lecci√≥n', 'lecciones',
                'temario', 'contenido', 'syllabus', 'programa', 'plan de estudios',
                'sesi√≥n', 'sesiones', 'pr√°ctica', 'pr√°cticas', 'entregable', 'entregables'
            ]
            
            response_lower = response_text.lower()
            mentions_content = any(indicator in response_lower for indicator in content_indicators)
            
            if not mentions_content:
                logging.info("‚úÖ Respuesta NO menciona contenido espec√≠fico - APROBADA")
                return True
                
            # Verificar estructura h√≠brida
            real_modules = course_info.get('modules', [])
            real_sessions = course_info.get('sessions', [])
            
            if real_modules:
                # Validar m√≥dulos
                for module in real_modules:
                    if not all(key in module for key in ['name', 'description']):
                        return False
                return True
                
            elif real_sessions:
                # Validar sesiones
                for session in real_sessions:
                    if not all(key in session for key in ['title', 'objective', 'duration_minutes']):
                        return False
                return True
            else:
                # No hay estructura espec√≠fica - permitir solo informaci√≥n general
                if any(word in response_lower for word in ['m√≥dulo', 'm√≥dulos', 'lecci√≥n', 'lecciones']):
                    return False
                return True
                
        except Exception as e:
            logging.error(f"‚ùå Error validando contenido del curso: {e}")
            return True
    
    async def validate_response(self, response: str, course_data: Dict[str, Any], bonuses_data: Optional[List[Dict[str, Any]]] = None, all_courses_data: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """
        Validador OpenAI permisivo para herramientas de conversi√≥n.
        
        Funcionalidad:
        - Valida informaci√≥n contra base de datos
        - SIEMPRE permite activaci√≥n de herramientas
        - Solo bloquea contradicciones claras
        - Permite lenguaje persuasivo y ejemplos derivados
        
        Conecta con:
        - OpenAI API para validaci√≥n inteligente
        - course_data desde base de datos
        - Sistema de herramientas para aprobaci√≥n
        """
        validation_prompt = f"""
        Eres un validador PERMISIVO de un agente de ventas de IA. Tu funci√≥n es PERMITIR la activaci√≥n de herramientas y solo bloquear informaci√≥n CLARAMENTE FALSA.

        IMPORTANTE: 
        - SIEMPRE permite la activaci√≥n de herramientas de conversi√≥n
        - SOLO marca como inv√°lido si hay CONTRADICCIONES CLARAS con los datos
        - PERMITE lenguaje persuasivo, ejemplos derivados, y beneficios l√≥gicos
        - NO bloquees por falta de informaci√≥n espec√≠fica
        
        CRITERIOS PERMISIVOS - El agente DEBE SER APROBADO si:
        1. ‚úÖ No contradice DIRECTAMENTE los datos del curso
        2. ‚úÖ Usa informaci√≥n que se deriva l√≥gicamente del contenido
        3. ‚úÖ Menciona herramientas disponibles (activaci√≥n de herramientas del bot)
        4. ‚úÖ Ofrece recursos, demos, previews que existen en la plataforma
        5. ‚úÖ Habla de beneficios educativos generales
        6. ‚úÖ Personaliza la comunicaci√≥n para el usuario
        7. ‚úÖ Usa t√©cnicas de ventas est√°ndar
        8. ‚úÖ Menciona caracter√≠sticas que est√°n en cualquier parte de la base de datos
        9. ‚úÖ Sugiere aplicaciones pr√°cticas del curso
        10. ‚úÖ Activa cualquier herramienta de conversi√≥n disponible
        
        BLOQUEAR SOLO SI:
        ‚ùå Contradice EXPL√çCITAMENTE precios, fechas, o contenido espec√≠fico de la BD
        ‚ùå Menciona bonos que NO existen en bonuses_data
        ‚ùå Da informaci√≥n t√©cnica incorrecta que est√° en la BD
        
        FILOSOF√çA: "En la duda, APROBAR. Solo rechazar si es CLARAMENTE FALSO."
        
        RESPUESTA DEL AGENTE A VALIDAR:
        {response}
        
        DATOS DEL CURSO:
        {json.dumps(course_data, ensure_ascii=False)}
        
        Responde SOLO con JSON:
        {{
            "is_valid": true,
            "confidence": 0.95,
            "issues": [],
            "corrected_response": null,
            "explanation": "Raz√≥n de la decisi√≥n"
        }}
        """
        
        try:
            validation_response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": validation_prompt}],
                temperature=0.1
            )
            
            result = json.loads(validation_response.choices[0].message.content)
            
            if result.get('is_valid', True):
                logging.info(f"‚úÖ Respuesta APROBADA por validador (confianza: {result.get('confidence', 'N/A')})")
            else:
                logging.warning(f"‚ö†Ô∏è Respuesta RECHAZADA: {result.get('explanation', 'Sin explicaci√≥n')}")
            
            return result
            
        except Exception as e:
            logging.error(f"‚ùå Error en validaci√≥n: {e}")
            # En caso de error, aprobar por defecto (permisivo)
            return {
                "is_valid": True,
                "confidence": 0.8,
                "issues": [],
                "corrected_response": None,
                "explanation": "Aprobado por defecto debido a error en validaci√≥n"
            }

# ============================================================================
# 5. ACTIVACI√ìN INTELIGENTE DE HERRAMIENTAS
# ============================================================================

class ToolActivator:
    """
    Sistema de activaci√≥n inteligente de herramientas basado en intenci√≥n.
    
    Funcionalidad:
    - Analiza intenci√≥n del usuario y activa herramientas apropiadas
    - M√°ximo 2 herramientas por interacci√≥n para no ser invasivo
    - Retorna contenido estructurado para que el agente lo procese
    
    Conecta con:
    - IntentAnalyzer para clasificaci√≥n de mensajes
    - AgentTools para ejecutar herramientas espec√≠ficas
    - Sistema de logging para m√©tricas
    """
    
    def __init__(self, agent_tools: AgentTools):
        self.agent_tools = agent_tools
    
    async def _activate_tools_based_on_intent(self, intent_analysis: Dict, user_memory, course_info: Optional[Dict], user_message: str, user_id: str) -> List[Dict[str, Any]]:
        """
        Activa herramientas basadas en la intenci√≥n detectada.
        
        Funcionalidad:
        - Activaci√≥n directa seg√∫n categor√≠a de intenci√≥n
        - Prioriza herramientas m√°s efectivas para cada contexto
        - Maneja activaci√≥n especial para flujo de contacto
        
        Conecta con:
        - intent_analysis desde IntentAnalyzer
        - agent_tools para ejecutar herramientas
        - Sistema de memoria para contexto del usuario
        """
        category = intent_analysis.get('category', 'GENERAL_QUESTION')
        confidence = intent_analysis.get('confidence', 0.5)
        course_id = user_memory.selected_course or (course_info.get('id') if course_info else None)
        
        if not course_id:
            logging.warning("‚ùå No hay course_id disponible para activar herramientas")
            return []
        
        tool_contents = []
        
        try:
            # ACTIVACI√ìN DIRECTA BASADA EN CATEGOR√çA DE INTENCI√ìN
            if category == 'EXPLORATION' and confidence > 0.6:
                if 'contenido' in user_message.lower() or 'm√≥dulo' in user_message.lower():
                    content = await self.agent_tools.mostrar_syllabus_interactivo(user_id, course_id)
                elif 'ver' in user_message.lower() or 'ejemplo' in user_message.lower():
                    content = await self.agent_tools.enviar_preview_curso(user_id, course_id)
                else:
                    content = await self.agent_tools.enviar_recursos_gratuitos(user_id, course_id)
                    
            elif category == 'FREE_RESOURCES' and confidence > 0.5:
                # DIRECTO: Enviar recursos sin preguntar
                content = await self.agent_tools.enviar_recursos_gratuitos(user_id, course_id)
                
            elif category == 'OBJECTION_PRICE' and confidence > 0.6:
                content = await self.agent_tools.mostrar_comparativa_precios(user_id, course_id)
                
            elif category == 'OBJECTION_VALUE' and confidence > 0.6:
                content = await self.agent_tools.mostrar_casos_exito_similares(user_id, course_id)
                
            elif category == 'OBJECTION_TRUST' and confidence > 0.6:
                content = await self.agent_tools.mostrar_garantia_satisfaccion(user_id)
                
            elif category == 'BUYING_SIGNALS' and confidence > 0.7:
                if 'asesor' in user_message.lower() or 'contactar' in user_message.lower():
                    # ACTIVACI√ìN CR√çTICA: Flujo de contacto directo
                    content = await self.agent_tools.contactar_asesor_directo(user_id, course_id)
                    if content:
                        tool_contents.append({
                            'type': 'contact_flow_activated',
                            'content': content,
                            'tool_name': 'contactar_asesor_directo'
                        })
                else:
                    content = await self.agent_tools.mostrar_bonos_exclusivos(user_id, course_id)
                    
            elif category == 'AUTOMATION_NEED' and confidence > 0.6:
                content = await self.agent_tools.detectar_necesidades_automatizacion(user_id, course_id)
            
            # Procesar contenido de herramientas
            if content and 'contact_flow_activated' not in [tc.get('type') for tc in tool_contents]:
                tool_contents.append({
                    'type': 'multimedia' if 'resources' in content else 'text',
                    'content': content,
                    'tool_name': f"{category.lower()}_tool"
                })
                
        except Exception as e:
            logging.error(f"‚ùå Error activando herramientas para categor√≠a {category}: {e}")
        
        return tool_contents

# ============================================================================
# 6. SERVICIOS DE BASE DE DATOS
# ============================================================================

class DatabaseService:
    """
    Servicio de base de datos PostgreSQL con connection pooling.
    
    Funcionalidad:
    - Maneja todas las operaciones de base de datos
    - Connection pooling para performance
    - Operaciones as√≠ncronas optimizadas
    
    Conecta con:
    - PostgreSQL database (ai_courses schema)
    - Todas las funciones que requieren datos
    - Sistema de configuraci√≥n para conexi√≥n
    """
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.pool = None
    
    async def initialize_pool(self):
        """Inicializa el pool de conexiones."""
        self.pool = await asyncpg.create_pool(self.database_url)
    
    async def get_course_details(self, course_id: str) -> Dict[str, Any]:
        """
        Obtiene detalles completos del curso desde ai_courses.
        
        Funcionalidad:
        - Query optimizada a tabla ai_courses
        - Incluye precio, descripci√≥n, duraci√≥n
        - Maneja errores de conexi√≥n
        
        Conecta con:
        - Tabla ai_courses en PostgreSQL
        - Sistema de herramientas que necesitan info del curso
        """
        try:
            async with self.pool.acquire() as connection:
                query = """
                SELECT course_id, name, short_description, long_description, 
                       price_usd, total_duration, level, active
                FROM ai_courses 
                WHERE course_id = $1 AND active = true
                """
                result = await connection.fetchrow(query, course_id)
                
                if result:
                    return dict(result)
                else:
                    logging.warning(f"Curso no encontrado: {course_id}")
                    return {}
                    
        except Exception as e:
            logging.error(f"Error obteniendo detalles del curso: {e}")
            return {}
    
    async def get_course_sessions(self, course_id: str) -> List[Dict[str, Any]]:
        """
        Obtiene sesiones del curso desde ai_course_sessions.
        
        Funcionalidad:
        - Query a tabla ai_course_sessions
        - Retorna sesiones ordenadas
        - Incluye t√≠tulo, objetivo, duraci√≥n
        
        Conecta con:
        - Tabla ai_course_sessions en PostgreSQL
        - Herramientas que muestran contenido del curso
        """
        try:
            async with self.pool.acquire() as connection:
                query = """
                SELECT session_id, title, objective, duration_minutes, session_order
                FROM ai_course_sessions 
                WHERE course_id = $1 
                ORDER BY session_order
                """
                results = await connection.fetch(query, course_id)
                
                return [dict(row) for row in results]
                
        except Exception as e:
            logging.error(f"Error obteniendo sesiones del curso: {e}")
            return []
    
    async def get_active_bonuses(self, course_id: str) -> List[Dict[str, Any]]:
        """
        Obtiene bonos activos para el curso.
        
        Funcionalidad:
        - Query a tabla limited_time_bonuses
        - Filtra por fecha de expiraci√≥n
        - Retorna bonos v√°lidos
        
        Conecta con:
        - Tabla limited_time_bonuses en PostgreSQL
        - Herramientas de persuasi√≥n y urgencia
        """
        try:
            async with self.pool.acquire() as connection:
                query = """
                SELECT bonus_id, name, description, value_usd, expires_at
                FROM limited_time_bonuses 
                WHERE course_id = $1 AND expires_at > NOW() AND active = true
                """
                results = await connection.fetch(query, course_id)
                
                return [dict(row) for row in results]
                
        except Exception as e:
            logging.error(f"Error obteniendo bonos: {e}")
            return []

# ============================================================================
# 7. FUNCIONES DE INICIALIZACI√ìN Y COORDINACI√ìN
# ============================================================================

async def initialize_bot_system(database_url: str, openai_api_key: str):
    """
    Inicializa todo el sistema del bot de manera coordinada.
    
    Funcionalidad:
    - Inicializa todos los componentes en orden correcto
    - Configura conexiones y dependencias
    - Retorna instancias configuradas listas para usar
    
    Conecta con:
    - Todos los sistemas principales del bot
    - Variables de entorno y configuraci√≥n
    - Sistema de logging
    """
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot.log'),
            logging.StreamHandler()
        ]
    )
    
    # Inicializar servicios base
    db_service = DatabaseService(database_url)
    await db_service.initialize_pool()
    
    openai_client = AsyncOpenAI(api_key=openai_api_key)
    
    # Inicializar componentes del sistema
    memory_manager = MemoryManager()
    intent_analyzer = IntentAnalyzer(openai_client)
    response_validator = ResponseValidator(openai_client)
    
    # Servicios de recursos (mockup)
    resource_service = MockResourceService()
    
    # Sistema de herramientas
    agent_tools = AgentTools(db_service, resource_service)
    tool_activator = ToolActivator(agent_tools)
    
    logging.info("‚úÖ Sistema del bot inicializado completamente")
    
    return {
        'db_service': db_service,
        'memory_manager': memory_manager,
        'intent_analyzer': intent_analyzer,
        'response_validator': response_validator,
        'agent_tools': agent_tools,
        'tool_activator': tool_activator,
        'openai_client': openai_client
    }

class MockResourceService:
    """
    Servicio mock de recursos para funcionalidad b√°sica.
    En implementaci√≥n real se conectar√≠a con bot_resources table.
    """
    
    async def get_free_resources(self, course_id: str) -> List[Dict[str, str]]:
        """Mock de recursos gratuitos."""
        return [
            {
                "type": "document",
                "url": f"https://recursos.aprenda-ia.com/guia-{course_id}.pdf",
                "caption": "üìñ Gu√≠a de Implementaci√≥n"
            }
        ]
    
    async def get_course_preview(self, course_id: str) -> str:
        """Mock de preview del curso."""
        return f"https://recursos.aprenda-ia.com/preview-{course_id}.mp4"

# ============================================================================
# FUNCIONES DE FLUJO PRINCIPAL
# ============================================================================

async def process_user_message(message: str, user_id: str, system_components: Dict) -> str:
    """
    Funci√≥n principal para procesar mensajes del usuario.
    
    Funcionalidad:
    - Coordina todo el flujo de procesamiento
    - An√°lisis de intenci√≥n ‚Üí Activaci√≥n de herramientas ‚Üí Respuesta
    - Maneja la memoria del usuario y validaci√≥n
    
    Conecta con:
    - Todos los componentes del sistema
    - Flujo completo de conversaci√≥n
    - Sistema de logging
    
    Retorna: Respuesta final procesada para enviar al usuario
    """
    try:
        # Obtener componentes
        memory_manager = system_components['memory_manager']
        intent_analyzer = system_components['intent_analyzer']
        tool_activator = system_components['tool_activator']
        response_validator = system_components['response_validator']
        
        # Obtener memoria del usuario
        user_memory = memory_manager.get_lead_memory(user_id)
        
        # Analizar intenci√≥n
        intent_analysis = await intent_analyzer.analyze_intent(message, user_memory)
        
        # Activar herramientas basadas en intenci√≥n
        tool_contents = await tool_activator._activate_tools_based_on_intent(
            intent_analysis, user_memory, {}, message, user_id
        )
        
        # Generar respuesta (aqu√≠ ir√≠a la l√≥gica del agente principal)
        response = "Respuesta procesada del agente con herramientas activadas"
        
        # Validar respuesta
        validation_result = await response_validator.validate_response(response, {})
        
        if validation_result.get('is_valid', True):
            # Actualizar memoria
            user_memory.interaction_count += 1
            user_memory.last_interaction = datetime.now()
            memory_manager.save_lead_memory(user_id, user_memory)
            
            return response
        else:
            return validation_result.get('corrected_response', response)
            
    except Exception as e:
        logging.error(f"Error procesando mensaje: {e}")
        return "Disculpa, tengo un problema t√©cnico. ¬øPodr√≠as intentar de nuevo?"

if __name__ == "__main__":
    """
    Ejemplo de uso del sistema completo.
    """
    import os
    
    async def main():
        # Variables de entorno
        database_url = os.getenv('DATABASE_URL')
        openai_api_key = os.getenv('OPENAI_API_KEY')
        
        # Inicializar sistema
        system_components = await initialize_bot_system(database_url, openai_api_key)
        
        # Procesar mensaje de ejemplo
        response = await process_user_message(
            "Tienen recursos gratuitos?", 
            "123456789", 
            system_components
        )
        
        print(f"Respuesta: {response}")
    
    # Para ejecutar: python funciones_operativas_completas.py
    asyncio.run(main()) 