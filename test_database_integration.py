#!/usr/bin/env python3
"""
Script de prueba para verificar la integraci√≥n completa de la base de datos
con la nueva estructura relacional de cursos.
"""
import asyncio
import sys
from uuid import UUID
from app.infrastructure.database.repositories.course_repository import CourseRepository
from app.application.usecases.query_course_information import QueryCourseInformationUseCase
from prompts.agent_prompts import get_response_generation_prompt

def debug_print(message: str):
    """Print con formato visual para debug"""
    print(f"üîç [TEST] {message}")

async def test_database_integration():
    """Prueba completa de integraci√≥n de base de datos"""
    
    debug_print("INICIANDO PRUEBAS DE INTEGRACI√ìN DE BASE DE DATOS")
    debug_print("=" * 60)
    
    # 1. Inicializar repositorio y use case
    debug_print("1. Inicializando componentes...")
    course_repo = CourseRepository()
    query_use_case = QueryCourseInformationUseCase()
    
    # Inicializar conexi√≥n
    init_success = await query_use_case.initialize()
    if not init_success:
        debug_print("‚ùå FALLO: No se pudo inicializar la conexi√≥n a la base de datos")
        return False
    
    debug_print("‚úÖ Conexi√≥n a base de datos inicializada")
    
    # 2. Probar consulta de cursos b√°sica
    debug_print("\n2. Probando consulta b√°sica de cursos...")
    try:
        all_courses = await course_repo.get_all_courses(limit=3)
        debug_print(f"‚úÖ Encontrados {len(all_courses)} cursos")
        
        if all_courses:
            first_course = all_courses[0]
            debug_print(f"   - Primer curso: {first_course.name} (ID: {first_course.id_course})")
        else:
            debug_print("‚ö†Ô∏è No se encontraron cursos en la base de datos")
            return False
            
    except Exception as e:
        debug_print(f"‚ùå Error en consulta b√°sica: {e}")
        return False
    
    # 3. Probar consulta de informaci√≥n detallada
    debug_print("\n3. Probando consulta de informaci√≥n detallada...")
    try:
        course_id = all_courses[0].id_course
        detailed_content = await course_repo.get_course_detailed_content(course_id)
        
        if detailed_content:
            course_data = detailed_content.get('course', {})
            sessions_data = detailed_content.get('sessions', [])
            bonds_data = detailed_content.get('bonds', [])
            
            debug_print(f"‚úÖ Informaci√≥n detallada obtenida:")
            debug_print(f"   - Curso: {course_data.get('name', 'N/A')}")
            debug_print(f"   - Sesiones: {len(sessions_data)}")
            debug_print(f"   - Bonos: {len(bonds_data)}")
            debug_print(f"   - Estructura generada: {len(detailed_content.get('course_structure', ''))} caracteres")
        else:
            debug_print("‚ö†Ô∏è No se pudo obtener informaci√≥n detallada del curso")
            
    except Exception as e:
        debug_print(f"‚ùå Error obteniendo informaci√≥n detallada: {e}")
        return False
    
    # 4. Probar formateo para chat
    debug_print("\n4. Probando formateo para WhatsApp...")
    try:
        # Formato b√°sico
        basic_formatted = await query_use_case.format_course_for_chat(all_courses[0])
        debug_print(f"‚úÖ Formato b√°sico generado ({len(basic_formatted)} caracteres)")
        
        # Formato detallado si tenemos informaci√≥n
        if detailed_content:
            detailed_formatted = await query_use_case.format_detailed_course_for_chat(detailed_content)
            debug_print(f"‚úÖ Formato detallado generado ({len(detailed_formatted)} caracteres)")
            debug_print(f"\nüì± EJEMPLO DE FORMATO DETALLADO:\n{detailed_formatted[:500]}...")
        
    except Exception as e:
        debug_print(f"‚ùå Error en formateo: {e}")
        return False
    
    # 5. Probar integraci√≥n con prompts
    debug_print("\n5. Probando integraci√≥n con sistema de prompts...")
    try:
        # Crear datos de prueba para user_memory
        class MockUserMemory:
            def __init__(self):
                self.name = "Carlos Empresario"
                self.role = "Director de Marketing"
                self.interests = ["marketing", "automatizaci√≥n"]
                self.pain_points = ["reportes manuales", "falta de tiempo"]
                self.stage = "course_selection"
                self.interaction_count = 3
                self.lead_score = 75
                self.automation_needs = {"reports": "semanales", "content": "diario"}
        
        mock_user_memory = MockUserMemory()
        
        # Datos de an√°lisis de intenci√≥n mock
        intent_analysis = {
            'category': 'EXPLORATION_SECTOR',
            'buyer_persona_match': 'lucia_copypro',
            'business_pain_detected': 'content_creation',
            'roi_opportunity': 'high',
            'confidence': 0.8,
            'response_focus': 'Enfoque consultivo empresarial',
            'recommended_action': 'provide_course_details',
            'implementation_timeline': '30_days',
            'urgency_level': 'medium'
        }
        
        # Generar prompt con informaci√≥n de curso
        prompt = get_response_generation_prompt(
            user_message="Me interesa saber m√°s sobre automatizaci√≥n de marketing",
            user_memory=mock_user_memory,
            intent_analysis=intent_analysis,
            context_info="Usuario explora automatizaci√≥n espec√≠fica",
            course_detailed_info=detailed_content if detailed_content else None
        )
        
        debug_print(f"‚úÖ Prompt generado exitosamente ({len(prompt)} caracteres)")
        debug_print(f"   - Incluye informaci√≥n detallada: {'S√≠' if detailed_content else 'No'}")
        
        # Mostrar una muestra del prompt
        debug_print(f"\nüìã MUESTRA DEL PROMPT GENERADO:\n{prompt[:800]}...")
        
    except Exception as e:
        debug_print(f"‚ùå Error en integraci√≥n con prompts: {e}")
        return False
    
    # 6. Probar estad√≠sticas y resumen
    debug_print("\n6. Probando estad√≠sticas del cat√°logo...")
    try:
        stats = await course_repo.get_course_statistics()
        debug_print(f"‚úÖ Estad√≠sticas obtenidas:")
        debug_print(f"   - Total cursos: {stats.get('total_courses', 0)}")
        debug_print(f"   - Niveles disponibles: {stats.get('total_levels', 0)}")
        debug_print(f"   - Modalidades: {stats.get('total_modalities', 0)}")
        debug_print(f"   - Promedio sesiones: {stats.get('avg_sessions', 0)}")
        debug_print(f"   - Promedio duraci√≥n: {stats.get('avg_duration_hours', 0)} horas")
        
        # Resumen del cat√°logo
        catalog_summary = await query_use_case.get_course_catalog_summary()
        debug_print(f"‚úÖ Resumen del cat√°logo generado")
        debug_print(f"   - Cursos destacados: {len(catalog_summary.get('featured_courses', []))}")
        
    except Exception as e:
        debug_print(f"‚ùå Error obteniendo estad√≠sticas: {e}")
        return False
    
    # 7. Probar b√∫squedas espec√≠ficas
    debug_print("\n7. Probando b√∫squedas espec√≠ficas...")
    try:
        # B√∫squeda por texto
        search_results = await query_use_case.search_courses_by_keyword("IA", limit=2)
        debug_print(f"‚úÖ B√∫squeda por 'IA': {len(search_results)} resultados")
        
        # Obtener niveles y modalidades disponibles
        options = await query_use_case.get_available_options()
        debug_print(f"‚úÖ Opciones disponibles:")
        debug_print(f"   - Niveles: {options.get('levels', [])}")
        debug_print(f"   - Modalidades: {options.get('modalities', [])}")
        
    except Exception as e:
        debug_print(f"‚ùå Error en b√∫squedas: {e}")
        return False
    
    debug_print("\n" + "=" * 60)
    debug_print("üéâ TODAS LAS PRUEBAS DE INTEGRACI√ìN PASARON EXITOSAMENTE!")
    debug_print("‚úÖ La base de datos est√° correctamente integrada con:")
    debug_print("   - Repositorio de cursos con estructura relacional completa")
    debug_print("   - Consultas de informaci√≥n detallada (sesiones, actividades, bonos)")
    debug_print("   - Formateo optimizado para WhatsApp")
    debug_print("   - Integraci√≥n con sistema de prompts del agente")
    debug_print("   - B√∫squedas y filtros")
    debug_print("   - Estad√≠sticas del cat√°logo")
    
    return True

async def main():
    """Funci√≥n principal"""
    try:
        success = await test_database_integration()
        if success:
            print("\nüöÄ Sistema listo para usar con informaci√≥n rica de base de datos!")
            sys.exit(0)
        else:
            print("\n‚ùå Hay problemas con la integraci√≥n de base de datos")
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error cr√≠tico en las pruebas: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())